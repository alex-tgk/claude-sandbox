{
  "version": "1.0.0",
  "generatedAt": "2025-10-26T07:24:44.392Z",
  "components": [
    {
      "name": "Avatar",
      "category": "atoms",
      "description": "Avatar component",
      "props": [
        {
          "name": "name",
          "type": "string",
          "description": "",
          "required": false
        },
        {
          "name": "src",
          "type": "string",
          "description": "",
          "required": false
        },
        {
          "name": "size",
          "type": "AvatarSize",
          "description": "",
          "required": false
        },
        {
          "name": "status",
          "type": "AvatarStatus",
          "description": "",
          "required": false
        }
      ],
      "variants": [],
      "sizes": [
        "xs",
        "sm",
        "md",
        "lg"
      ],
      "examples": [
        {
          "name": "Sizes",
          "code": "render: () => (\n    <div className=\"flex items-end gap-4\">\n      <Avatar size=\"xs\" name=\"Small\" />\n      <Avatar size=\"sm\" name=\"Medium\" />\n      <Avatar size=\"md\" name=\"Large\" />\n      <Avatar size=\"lg\" name=\"XL\" />\n    </div>\n  ),",
          "description": ""
        }
      ],
      "accessibility": {
        "ariaAttributes": [
          "aria-label"
        ]
      },
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/avatar/Avatar.tsx",
      "storyPath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/avatar/Avatar.stories.tsx",
      "since": "0.1.0"
    },
    {
      "name": "Badge",
      "category": "atoms",
      "description": "* This component provides a flexible badge with:",
      "props": [
        {
          "name": "variant",
          "type": "BadgeVariant",
          "description": "/* Visual variant of the badge",
          "required": false,
          "defaultValue": "md"
        },
        {
          "name": "size",
          "type": "BadgeSize",
          "description": "/* Size of the badge",
          "required": false,
          "defaultValue": "rounded"
        },
        {
          "name": "shape",
          "type": "BadgeShape",
          "description": "/* Shape style of the badge",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "dot",
          "type": "boolean",
          "description": "/* Whether to display as a dot (small colored circle)",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "removable",
          "type": "boolean",
          "description": "/* Whether the badge is removable (shows close button)",
          "required": false
        },
        {
          "name": "onRemove",
          "type": "() => void",
          "description": "/* Callback when the close button is clicked",
          "required": false
        },
        {
          "name": "icon",
          "type": "React.ReactNode",
          "description": "/* Optional icon to display before the badge text",
          "required": false
        },
        {
          "name": "ariaLabel",
          "type": "string",
          "description": "/* ARIA label for additional context",
          "required": false
        }
      ],
      "variants": [
        "primary",
        "secondary",
        "success",
        "warning",
        "error",
        "info"
      ],
      "sizes": [
        "sm",
        "md",
        "lg"
      ],
      "examples": [
        {
          "name": "Default",
          "code": "args: {\n    children: 'Badge',",
          "description": "/**"
        },
        {
          "name": "Variants",
          "code": "render: () => (\n    <div className=\"flex flex-wrap gap-3\">\n      <Badge variant=\"primary\">Primary</Badge>\n      <Badge variant=\"secondary\">Secondary</Badge>\n      <Badge variant=\"success\">Success</Badge>\n      <Badge variant=\"warning\">Warning</Badge>\n      <Badge variant=\"error\">Error</Badge>\n      <Badge variant=\"info\">Info</Badge>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Sizes",
          "code": "render: () => (\n    <div className=\"flex flex-wrap items-center gap-3\">\n      <Badge size=\"sm\">Small</Badge>\n      <Badge size=\"md\">Medium</Badge>\n      <Badge size=\"lg\">Large</Badge>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Shapes",
          "code": "render: () => (\n    <div className=\"flex flex-wrap gap-3\">\n      <Badge shape=\"rounded\" variant=\"primary\">\n        Rounded\n      </Badge>\n      <Badge shape=\"pill\" variant=\"primary\">\n        Pill\n      </Badge>\n      <Badge shape=\"rounded\" variant=\"success\">\n        Rounded\n      </Badge>\n      <Badge shape=\"pill\" variant=\"success\">\n        Pill\n      </Badge>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Dots",
          "code": "render: () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center gap-3\">\n        <Badge dot variant=\"success\" ariaLabel=\"Online\" />\n        <span className=\"text-sm\">Online</span>\n      </div>\n      <div className=\"flex items-center gap-3\">\n        <Badge dot variant=\"warning\" ariaLabel=\"Away\" />\n        <span className=\"text-sm\">Away</span>\n      </div>\n      <div className=\"flex items-center gap-3\">\n        <Badge dot variant=\"error\" ariaLabel=\"Offline\" />\n        <span className=\"text-sm\">Offline</span>\n      </div>\n      <div className=\"flex items-center gap-3\">\n        <Badge dot variant=\"info\" ariaLabel=\"Busy\" />\n        <span className=\"text-sm\">Busy</span>\n      </div>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "DotSizes",
          "code": "render: () => (\n    <div className=\"flex items-center gap-4\">\n      <Badge dot size=\"sm\" variant=\"success\" ariaLabel=\"Small dot\" />\n      <Badge dot size=\"md\" variant=\"success\" ariaLabel=\"Medium dot\" />\n      <Badge dot size=\"lg\" variant=\"success\" ariaLabel=\"Large dot\" />\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Removable",
          "code": "render: function RemovableExample() {\n    const [badges, setBadges] = useState([\n      { id: 1, label: 'React', variant: 'primary' as const",
          "description": "/**"
        },
        {
          "name": "WithIcons",
          "code": "render: () => {\n    const StarIcon = (\n      <svg\n        width=\"14\"\n        height=\"14\"\n        viewBox=\"0 0 24 24\"\n        fill=\"currentColor\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M12 2L15.09 8.26L22 9.27L17 14.14L18.18 21.02L12 17.77L5.82 21.02L7 14.14L2 9.27L8.91 8.26L12 2Z\" />\n      </svg>\n    );\n\n    const CheckIcon = (\n      <svg\n        width=\"14\"\n        height=\"14\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M5 13l4 4L19 7\" />\n      </svg>\n    );\n\n    const AlertIcon = (\n      <svg\n        width=\"14\"\n        height=\"14\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n        />\n      </svg>\n    );\n\n    return (\n      <div className=\"flex flex-wrap gap-3\">\n        <Badge icon={StarIcon",
          "description": "/**"
        },
        {
          "name": "Notifications",
          "code": "render: () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center gap-3\">\n        <span className=\"text-sm\">Messages</span>\n        <Badge variant=\"error\" shape=\"pill\">\n          3\n        </Badge>\n      </div>\n      <div className=\"flex items-center gap-3\">\n        <span className=\"text-sm\">Notifications</span>\n        <Badge variant=\"primary\" shape=\"pill\">\n          12\n        </Badge>\n      </div>\n      <div className=\"flex items-center gap-3\">\n        <span className=\"text-sm\">Updates</span>\n        <Badge variant=\"info\" shape=\"pill\">\n          99+\n        </Badge>\n      </div>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "AllCombinations",
          "code": "render: () => (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Small</h3>\n        <div className=\"flex flex-wrap gap-3\">\n          <Badge variant=\"primary\" size=\"sm\">\n            Primary\n          </Badge>\n          <Badge variant=\"secondary\" size=\"sm\">\n            Secondary\n          </Badge>\n          <Badge variant=\"success\" size=\"sm\">\n            Success\n          </Badge>\n          <Badge variant=\"warning\" size=\"sm\">\n            Warning\n          </Badge>\n          <Badge variant=\"error\" size=\"sm\">\n            Error\n          </Badge>\n          <Badge variant=\"info\" size=\"sm\">\n            Info\n          </Badge>\n        </div>\n      </div>\n\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Medium</h3>\n        <div className=\"flex flex-wrap gap-3\">\n          <Badge variant=\"primary\" size=\"md\">\n            Primary\n          </Badge>\n          <Badge variant=\"secondary\" size=\"md\">\n            Secondary\n          </Badge>\n          <Badge variant=\"success\" size=\"md\">\n            Success\n          </Badge>\n          <Badge variant=\"warning\" size=\"md\">\n            Warning\n          </Badge>\n          <Badge variant=\"error\" size=\"md\">\n            Error\n          </Badge>\n          <Badge variant=\"info\" size=\"md\">\n            Info\n          </Badge>\n        </div>\n      </div>\n\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Large</h3>\n        <div className=\"flex flex-wrap gap-3\">\n          <Badge variant=\"primary\" size=\"lg\">\n            Primary\n          </Badge>\n          <Badge variant=\"secondary\" size=\"lg\">\n            Secondary\n          </Badge>\n          <Badge variant=\"success\" size=\"lg\">\n            Success\n          </Badge>\n          <Badge variant=\"warning\" size=\"lg\">\n            Warning\n          </Badge>\n          <Badge variant=\"error\" size=\"lg\">\n            Error\n          </Badge>\n          <Badge variant=\"info\" size=\"lg\">\n            Info\n          </Badge>\n        </div>\n      </div>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "StatusLabels",
          "code": "render: () => (\n    <div className=\"space-y-3\">\n      <div className=\"flex items-center gap-3\">\n        <span className=\"w-24 text-sm\">Active</span>\n        <Badge variant=\"success\" shape=\"pill\">\n          Active\n        </Badge>\n      </div>\n      <div className=\"flex items-center gap-3\">\n        <span className=\"w-24 text-sm\">Pending</span>\n        <Badge variant=\"warning\" shape=\"pill\">\n          Pending\n        </Badge>\n      </div>\n      <div className=\"flex items-center gap-3\">\n        <span className=\"w-24 text-sm\">Failed</span>\n        <Badge variant=\"error\" shape=\"pill\">\n          Failed\n        </Badge>\n      </div>\n      <div className=\"flex items-center gap-3\">\n        <span className=\"w-24 text-sm\">Draft</span>\n        <Badge variant=\"secondary\" shape=\"pill\">\n          Draft\n        </Badge>\n      </div>\n      <div className=\"flex items-center gap-3\">\n        <span className=\"w-24 text-sm\">Published</span>\n        <Badge variant=\"info\" shape=\"pill\">\n          Published\n        </Badge>\n      </div>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Tags",
          "code": "render: function TagsExample() {\n    const [tags, setTags] = useState([\n      'JavaScript',\n      'React',\n      'TypeScript',\n      'CSS',\n      'HTML',\n      'Node.js',\n    ]);\n\n    return (\n      <div className=\"flex flex-wrap gap-2\">\n        {tags.map((tag) => (\n          <Badge\n            key={tag",
          "description": "/**"
        },
        {
          "name": "CombinedFeatures",
          "code": "render: () => {\n    const StarIcon = (\n      <svg\n        width=\"14\"\n        height=\"14\"\n        viewBox=\"0 0 24 24\"\n        fill=\"currentColor\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M12 2L15.09 8.26L22 9.27L17 14.14L18.18 21.02L12 17.77L5.82 21.02L7 14.14L2 9.27L8.91 8.26L12 2Z\" />\n      </svg>\n    );\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex flex-wrap gap-2\">\n          <Badge icon={StarIcon",
          "description": "/**"
        }
      ],
      "accessibility": {
        "keyboardNavigation": "'Atoms/Badge',",
        "screenReaderSupport": "'Atoms/Badge',",
        "wcagCompliance": "WCAG 2.2 AA compliant",
        "ariaAttributes": [
          "aria-label"
        ],
        "focusManagement": "Includes focus management"
      },
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/badge/Badge.tsx",
      "storyPath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/badge/Badge.stories.tsx",
      "since": "0.1.0"
    },
    {
      "name": "Button",
      "category": "atoms",
      "description": "Button component",
      "props": [
        {
          "name": "variant",
          "type": "ButtonVariant",
          "description": "/* Visual variant of the button",
          "required": false,
          "defaultValue": "md"
        },
        {
          "name": "size",
          "type": "ButtonSize",
          "description": "/* Size of the button",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "isFullWidth",
          "type": "boolean",
          "description": "/* Whether the button should take full width of its container",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "isLoading",
          "type": "boolean",
          "description": "/* Whether the button is in a loading state",
          "required": false
        },
        {
          "name": "startIcon",
          "type": "React.ReactNode",
          "description": "/* Optional icon to display before the button text",
          "required": false
        },
        {
          "name": "endIcon",
          "type": "React.ReactNode",
          "description": "/* Optional icon to display after the button text",
          "required": false
        }
      ],
      "variants": [
        "primary",
        "secondary",
        "outline",
        "ghost",
        "danger"
      ],
      "sizes": [
        "sm",
        "md",
        "lg"
      ],
      "examples": [
        {
          "name": "Default",
          "code": "args: {\n    children: 'Button',",
          "description": "/**"
        },
        {
          "name": "Variants",
          "code": "render: () => (\n    <div className=\"flex flex-wrap gap-4\">\n      <Button variant=\"primary\">Primary</Button>\n      <Button variant=\"secondary\">Secondary</Button>\n      <Button variant=\"outline\">Outline</Button>\n      <Button variant=\"ghost\">Ghost</Button>\n      <Button variant=\"danger\">Danger</Button>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Sizes",
          "code": "render: () => (\n    <div className=\"flex flex-wrap items-center gap-4\">\n      <Button size=\"sm\">Small</Button>\n      <Button size=\"md\">Medium</Button>\n      <Button size=\"lg\">Large</Button>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Loading",
          "code": "args: {\n    isLoading: true,\n    children: 'Loading...',",
          "description": "/**"
        },
        {
          "name": "Disabled",
          "code": "args: {\n    disabled: true,\n    children: 'Disabled',",
          "description": "/**"
        },
        {
          "name": "FullWidth",
          "code": "args: {\n    isFullWidth: true,\n    children: 'Full Width Button',",
          "description": "/**"
        },
        {
          "name": "WithStartIcon",
          "code": "args: {\n    startIcon: (\n      <svg\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M8 3V13M3 8H13\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n        />\n      </svg>\n    ),\n    children: 'Add Item',",
          "description": "/**"
        },
        {
          "name": "WithEndIcon",
          "code": "args: {\n    endIcon: (\n      <svg\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M6 3L11 8L6 13\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n    ),\n    children: 'Next',",
          "description": "/**"
        },
        {
          "name": "AllCombinations",
          "code": "render: () => (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Small</h3>\n        <div className=\"flex flex-wrap gap-4\">\n          <Button variant=\"primary\" size=\"sm\">\n            Primary\n          </Button>\n          <Button variant=\"secondary\" size=\"sm\">\n            Secondary\n          </Button>\n          <Button variant=\"outline\" size=\"sm\">\n            Outline\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\">\n            Ghost\n          </Button>\n          <Button variant=\"danger\" size=\"sm\">\n            Danger\n          </Button>\n        </div>\n      </div>\n\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Medium</h3>\n        <div className=\"flex flex-wrap gap-4\">\n          <Button variant=\"primary\" size=\"md\">\n            Primary\n          </Button>\n          <Button variant=\"secondary\" size=\"md\">\n            Secondary\n          </Button>\n          <Button variant=\"outline\" size=\"md\">\n            Outline\n          </Button>\n          <Button variant=\"ghost\" size=\"md\">\n            Ghost\n          </Button>\n          <Button variant=\"danger\" size=\"md\">\n            Danger\n          </Button>\n        </div>\n      </div>\n\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Large</h3>\n        <div className=\"flex flex-wrap gap-4\">\n          <Button variant=\"primary\" size=\"lg\">\n            Primary\n          </Button>\n          <Button variant=\"secondary\" size=\"lg\">\n            Secondary\n          </Button>\n          <Button variant=\"outline\" size=\"lg\">\n            Outline\n          </Button>\n          <Button variant=\"ghost\" size=\"lg\">\n            Ghost\n          </Button>\n          <Button variant=\"danger\" size=\"lg\">\n            Danger\n          </Button>\n        </div>\n      </div>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "InteractiveStates",
          "code": "render: () => (\n    <div className=\"space-y-4\">\n      <div className=\"flex gap-4\">\n        <Button>Normal</Button>\n        <Button disabled>Disabled</Button>\n        <Button isLoading>Loading</Button>\n      </div>\n      <div className=\"flex gap-4\">\n        <Button variant=\"secondary\">Normal</Button>\n        <Button variant=\"secondary\" disabled>\n          Disabled\n        </Button>\n        <Button variant=\"secondary\" isLoading>\n          Loading\n        </Button>\n      </div>\n      <div className=\"flex gap-4\">\n        <Button variant=\"outline\">Normal</Button>\n        <Button variant=\"outline\" disabled>\n          Disabled\n        </Button>\n        <Button variant=\"outline\" isLoading>\n          Loading\n        </Button>\n      </div>\n    </div>\n  ),",
          "description": "/**"
        }
      ],
      "accessibility": {
        "keyboardNavigation": "'Atoms/Button',",
        "ariaAttributes": [
          "aria-busy",
          "aria-label"
        ],
        "focusManagement": "Includes focus management"
      },
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/button/Button.tsx",
      "storyPath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/button/Button.stories.tsx",
      "since": "0.1.0"
    },
    {
      "name": "Checkbox",
      "category": "atoms",
      "description": "* This component provides a styled checkbox with:",
      "props": [
        {
          "name": "variant",
          "type": "CheckboxVariant",
          "description": "/* Visual variant of the checkbox",
          "required": false,
          "defaultValue": "md"
        },
        {
          "name": "size",
          "type": "CheckboxSize",
          "description": "/* Size of the checkbox",
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "description": "/* Label text for the checkbox",
          "required": false
        },
        {
          "name": "helperText",
          "type": "string",
          "description": "/* Helper text displayed below the checkbox",
          "required": false
        },
        {
          "name": "error",
          "type": "string",
          "description": "/* Error message displayed below the checkbox (sets variant to 'error')",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "description": "/* Whether the checkbox is in an indeterminate state",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "description": "/* Whether the checkbox is required",
          "required": false
        },
        {
          "name": "checked",
          "type": "boolean",
          "description": "/* Controlled checked state",
          "required": false
        },
        {
          "name": "defaultChecked",
          "type": "boolean",
          "description": "/* Default checked state for uncontrolled mode",
          "required": false
        },
        {
          "name": "onCheckedChange",
          "type": "(checked: boolean) => void",
          "description": "/* Callback when checked state changes",
          "required": false
        }
      ],
      "variants": [
        "primary",
        "secondary",
        "success",
        "error"
      ],
      "sizes": [
        "sm",
        "md",
        "lg"
      ],
      "examples": [
        {
          "name": "Default",
          "code": "args: {\n    label: 'Accept terms and conditions',",
          "description": "/**"
        },
        {
          "name": "Variants",
          "code": "render: () => (\n    <div className=\"flex flex-col gap-4\">\n      <Checkbox label=\"Primary variant\" variant=\"primary\" />\n      <Checkbox label=\"Secondary variant\" variant=\"secondary\" />\n      <Checkbox label=\"Success variant\" variant=\"success\" />\n      <Checkbox label=\"Error variant\" variant=\"error\" />\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Sizes",
          "code": "render: () => (\n    <div className=\"flex flex-col gap-4\">\n      <Checkbox label=\"Small checkbox\" size=\"sm\" />\n      <Checkbox label=\"Medium checkbox\" size=\"md\" />\n      <Checkbox label=\"Large checkbox\" size=\"lg\" />\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Checked",
          "code": "args: {\n    label: 'I agree',\n    defaultChecked: true,",
          "description": "/**"
        },
        {
          "name": "Disabled",
          "code": "render: () => (\n    <div className=\"flex flex-col gap-4\">\n      <Checkbox label=\"Disabled unchecked\" disabled />\n      <Checkbox label=\"Disabled checked\" disabled defaultChecked />\n      <Checkbox label=\"Disabled indeterminate\" disabled indeterminate />\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Indeterminate",
          "code": "args: {\n    label: 'Select all',\n    indeterminate: true,",
          "description": "/**"
        },
        {
          "name": "WithHelperText",
          "code": "args: {\n    label: 'Subscribe to newsletter',\n    helperText: 'We will send you updates about new features',",
          "description": "/**"
        },
        {
          "name": "WithError",
          "code": "args: {\n    label: 'I agree to the terms',\n    error: 'You must agree to continue',\n    isRequired: true,",
          "description": "/**"
        },
        {
          "name": "Required",
          "code": "args: {\n    label: 'Required field',\n    isRequired: true,",
          "description": "/**"
        },
        {
          "name": "WithoutLabel",
          "code": "args: {\n    'aria-label': 'Accept terms',",
          "description": "/**"
        },
        {
          "name": "Controlled",
          "code": "render: () => {\n    const ControlledExample = () => {\n      const [checked, setChecked] = useState(false);\n\n      return (\n        <div className=\"flex flex-col gap-4\">\n          <Checkbox\n            label=\"Controlled checkbox\"\n            checked={checked",
          "description": "/**"
        },
        {
          "name": "SelectAllExample",
          "code": "render: () => {\n    const SelectAllExample = () => {\n      const [items, setItems] = useState([\n        { id: 1, label: 'Item 1', checked: false",
          "description": "/**"
        },
        {
          "name": "AllCombinations",
          "code": "render: () => (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Small</h3>\n        <div className=\"flex flex-col gap-3\">\n          <Checkbox label=\"Primary\" variant=\"primary\" size=\"sm\" />\n          <Checkbox label=\"Secondary\" variant=\"secondary\" size=\"sm\" />\n          <Checkbox label=\"Success\" variant=\"success\" size=\"sm\" />\n          <Checkbox label=\"Error\" variant=\"error\" size=\"sm\" />\n        </div>\n      </div>\n\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Medium</h3>\n        <div className=\"flex flex-col gap-3\">\n          <Checkbox label=\"Primary\" variant=\"primary\" size=\"md\" />\n          <Checkbox label=\"Secondary\" variant=\"secondary\" size=\"md\" />\n          <Checkbox label=\"Success\" variant=\"success\" size=\"md\" />\n          <Checkbox label=\"Error\" variant=\"error\" size=\"md\" />\n        </div>\n      </div>\n\n      <div>\n        <h3 className=\"mb-4 text-lg font-semibold\">Large</h3>\n        <div className=\"flex flex-col gap-3\">\n          <Checkbox label=\"Primary\" variant=\"primary\" size=\"lg\" />\n          <Checkbox label=\"Secondary\" variant=\"secondary\" size=\"lg\" />\n          <Checkbox label=\"Success\" variant=\"success\" size=\"lg\" />\n          <Checkbox label=\"Error\" variant=\"error\" size=\"lg\" />\n        </div>\n      </div>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "InteractiveStates",
          "code": "render: () => (\n    <div className=\"space-y-6\">\n      <div>\n        <h3 className=\"mb-3 text-lg font-semibold\">Unchecked</h3>\n        <div className=\"flex flex-col gap-2\">\n          <Checkbox label=\"Normal\" />\n          <Checkbox label=\"Disabled\" disabled />\n          <Checkbox label=\"With error\" error=\"Error message\" />\n        </div>\n      </div>\n\n      <div>\n        <h3 className=\"mb-3 text-lg font-semibold\">Checked</h3>\n        <div className=\"flex flex-col gap-2\">\n          <Checkbox label=\"Normal\" defaultChecked />\n          <Checkbox label=\"Disabled\" disabled defaultChecked />\n          <Checkbox label=\"With success\" variant=\"success\" defaultChecked />\n        </div>\n      </div>\n\n      <div>\n        <h3 className=\"mb-3 text-lg font-semibold\">Indeterminate</h3>\n        <div className=\"flex flex-col gap-2\">\n          <Checkbox label=\"Normal\" indeterminate />\n          <Checkbox label=\"Disabled\" disabled indeterminate />\n          <Checkbox label=\"With helper\" indeterminate helperText=\"Some items selected\" />\n        </div>\n      </div>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "FormExample",
          "code": "render: () => {\n    const FormExample = () => {\n      const [formData, setFormData] = useState({\n        newsletter: false,\n        terms: false,\n        privacy: false,",
          "description": "/**"
        }
      ],
      "accessibility": {
        "keyboardNavigation": "'Atoms/Checkbox',",
        "wcagCompliance": "WCAG 2.2 AA compliant",
        "ariaAttributes": [
          "aria-invalid",
          "aria-describedby",
          "aria-required",
          "aria-hidden",
          "aria-label"
        ],
        "focusManagement": "Includes focus management"
      },
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/checkbox/Checkbox.tsx",
      "storyPath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/checkbox/Checkbox.stories.tsx",
      "since": "0.1.0"
    },
    {
      "name": "Divider",
      "category": "atoms",
      "description": "Divider component",
      "props": [
        {
          "name": "orientation",
          "type": "DividerOrientation",
          "description": "",
          "required": false
        },
        {
          "name": "inset",
          "type": "DividerInset",
          "description": "",
          "required": false
        },
        {
          "name": "length",
          "type": "DividerLength",
          "description": "",
          "required": false
        }
      ],
      "variants": [],
      "examples": [
        {
          "name": "Vertical",
          "code": "args: {\n    orientation: 'vertical',\n    length: 'content',",
          "description": ""
        }
      ],
      "accessibility": {
        "ariaAttributes": [
          "aria-orientation"
        ]
      },
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/divider/Divider.tsx",
      "storyPath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/divider/Divider.stories.tsx",
      "since": "0.1.0"
    },
    {
      "name": "Flex",
      "category": "atoms",
      "description": "* A powerful flex layout component that:",
      "props": [
        {
          "name": "direction",
          "type": "FlexDirection",
          "description": "/* Flex direction",
          "required": false,
          "defaultValue": "0"
        },
        {
          "name": "gap",
          "type": "FlexGap",
          "description": "/* Gap between flex items (Carbon spacing scale)",
          "required": false,
          "defaultValue": "stretch"
        },
        {
          "name": "align",
          "type": "FlexAlign",
          "description": "/* Align items along cross axis",
          "required": false,
          "defaultValue": "start"
        },
        {
          "name": "justify",
          "type": "FlexJustify",
          "description": "/* Justify items along main axis",
          "required": false,
          "defaultValue": "nowrap"
        },
        {
          "name": "wrap",
          "type": "FlexWrap",
          "description": "/* Flex wrap behavior",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "isFullWidth",
          "type": "boolean",
          "description": "/* Whether flex container should take full width",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "isFullHeight",
          "type": "boolean",
          "description": "/* Whether flex container should take full height",
          "required": false
        },
        {
          "name": "basis",
          "type": "string | number",
          "description": "/* Flex basis (CSS flex-basis)",
          "required": false
        },
        {
          "name": "grow",
          "type": "number",
          "description": "/* Flex grow (CSS flex-grow)",
          "required": false
        },
        {
          "name": "shrink",
          "type": "number",
          "description": "/* Flex shrink (CSS flex-shrink)",
          "required": false
        }
      ],
      "variants": [],
      "examples": [],
      "accessibility": {},
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/flex/Flex.tsx",
      "since": "0.2.0"
    },
    {
      "name": "Grid",
      "category": "atoms",
      "description": "* A flexible grid layout component that:",
      "props": [
        {
          "name": "cols",
          "type": "GridCols",
          "description": "/* Number of columns in the grid",
          "required": false,
          "defaultValue": "4"
        },
        {
          "name": "gap",
          "type": "GridGap",
          "description": "/* Gap between grid items (Carbon spacing scale)",
          "required": false
        }
      ],
      "variants": [],
      "examples": [],
      "accessibility": {},
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/grid/Grid.tsx",
      "since": "0.2.0"
    },
    {
      "name": "Input",
      "category": "atoms",
      "description": "* This component provides a styled text input with:",
      "props": [
        {
          "name": "variant",
          "type": "InputVariant",
          "description": "/* Visual variant of the input",
          "required": false,
          "defaultValue": "md"
        },
        {
          "name": "size",
          "type": "InputSize",
          "description": "/* Size of the input",
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "description": "/* Label text for the input",
          "required": false
        },
        {
          "name": "helperText",
          "type": "string",
          "description": "/* Helper text displayed below the input",
          "required": false
        },
        {
          "name": "error",
          "type": "string",
          "description": "/* Error message displayed below the input (sets variant to 'error')",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "description": "/* Whether the input is required",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "isFullWidth",
          "type": "boolean",
          "description": "/* Whether the input should take full width of its container",
          "required": false
        },
        {
          "name": "startAdornment",
          "type": "React.ReactNode",
          "description": "/* Optional icon or element to display at the start of the input",
          "required": false
        },
        {
          "name": "endAdornment",
          "type": "React.ReactNode",
          "description": "/* Optional icon or element to display at the end of the input",
          "required": false
        }
      ],
      "variants": [
        "default",
        "error",
        "success"
      ],
      "sizes": [
        "sm",
        "md",
        "lg"
      ],
      "examples": [
        {
          "name": "Default",
          "code": "args: {\n    label: 'Email',\n    placeholder: 'Enter your email',",
          "description": "/**"
        },
        {
          "name": "WithHelperText",
          "code": "args: {\n    label: 'Username',\n    placeholder: 'Choose a username',\n    helperText: 'Username must be at least 3 characters',",
          "description": "/**"
        },
        {
          "name": "WithError",
          "code": "args: {\n    label: 'Email',\n    placeholder: 'Enter your email',\n    error: 'Please enter a valid email address',\n    value: 'invalid-email',",
          "description": "/**"
        },
        {
          "name": "Required",
          "code": "args: {\n    label: 'Password',\n    type: 'password',\n    placeholder: 'Enter your password',\n    isRequired: true,\n    helperText: 'Password is required',",
          "description": "/**"
        },
        {
          "name": "Disabled",
          "code": "args: {\n    label: 'Disabled Field',\n    placeholder: 'Cannot edit this',\n    disabled: true,\n    value: 'This field is disabled',",
          "description": "/**"
        },
        {
          "name": "Sizes",
          "code": "render: () => (\n    <div className=\"space-y-4\">\n      <Input label=\"Small\" size=\"sm\" placeholder=\"Small input\" />\n      <Input label=\"Medium\" size=\"md\" placeholder=\"Medium input\" />\n      <Input label=\"Large\" size=\"lg\" placeholder=\"Large input\" />\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "WithStartAdornment",
          "code": "args: {\n    label: 'Search',\n    placeholder: 'Search...',\n    startAdornment: (\n      <svg\n        width=\"20\"\n        height=\"20\"\n        viewBox=\"0 0 20 20\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path\n          d=\"M9 17A8 8 0 1 0 9 1a8 8 0 0 0 0 16ZM19 19l-4.35-4.35\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n    ),",
          "description": "/**"
        },
        {
          "name": "WithEndAdornment",
          "code": "args: {\n    label: 'Amount',\n    type: 'number',\n    placeholder: '0.00',\n    endAdornment: <span className=\"text-sm font-medium\">USD</span>,",
          "description": "/**"
        },
        {
          "name": "FullWidth",
          "code": "args: {\n    label: 'Full Width Input',\n    placeholder: 'This input takes the full width',\n    isFullWidth: true,",
          "description": "/**"
        },
        {
          "name": "InputTypes",
          "code": "render: () => (\n    <div className=\"space-y-4\">\n      <Input label=\"Text\" type=\"text\" placeholder=\"Text input\" />\n      <Input label=\"Email\" type=\"email\" placeholder=\"email@example.com\" />\n      <Input label=\"Password\" type=\"password\" placeholder=\"••••••••\" />\n      <Input label=\"Number\" type=\"number\" placeholder=\"123\" />\n      <Input label=\"Tel\" type=\"tel\" placeholder=\"+1 (555) 000-0000\" />\n      <Input label=\"URL\" type=\"url\" placeholder=\"https://example.com\" />\n      <Input label=\"Date\" type=\"date\" />\n      <Input label=\"Time\" type=\"time\" />\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "FormExample",
          "code": "render: () => (\n    <div className=\"space-y-4\">\n      <Input\n        label=\"Name\"\n        placeholder=\"John Doe\"\n        isRequired\n        variant=\"success\"\n        helperText=\"Looks good!\"\n        value=\"John Doe\"\n      />\n      <Input\n        label=\"Email\"\n        type=\"email\"\n        placeholder=\"email@example.com\"\n        isRequired\n        error=\"Please enter a valid email address\"\n        value=\"invalid-email\"\n      />\n      <Input\n        label=\"Phone\"\n        type=\"tel\"\n        placeholder=\"+1 (555) 000-0000\"\n        helperText=\"We'll never share your phone number\"\n      />\n      <Input\n        label=\"Website\"\n        type=\"url\"\n        placeholder=\"https://example.com\"\n      />\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Controlled",
          "code": "render: function ControlledExample() {\n    const [value, setValue] = React.useState('');\n\n    return (\n      <div className=\"space-y-4\">\n        <Input\n          label=\"Controlled Input\"\n          value={value",
          "description": "/**"
        }
      ],
      "accessibility": {
        "keyboardNavigation": "'Atoms/Input',",
        "screenReaderSupport": "'Atoms/Input',",
        "ariaAttributes": [
          "aria-label",
          "aria-invalid",
          "aria-describedby",
          "aria-required"
        ],
        "focusManagement": "Includes focus management"
      },
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/input/Input.tsx",
      "storyPath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/input/Input.stories.tsx",
      "since": "0.1.0"
    },
    {
      "name": "Radio",
      "category": "atoms",
      "description": "* This component must be used within a RadioGroup. It provides:",
      "props": [
        {
          "name": "value",
          "type": "string",
          "description": "/* The value of this radio button",
          "required": true
        },
        {
          "name": "label",
          "type": "ReactNode",
          "description": "/* Label text for the radio button",
          "required": true
        },
        {
          "name": "description",
          "type": "ReactNode",
          "description": "/* Additional description text",
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "/* Whether the radio button is disabled (overrides group disabled state)",
          "required": false
        },
        {
          "name": "className",
          "type": "string",
          "description": "/* Custom className for the wrapper",
          "required": false
        }
      ],
      "variants": [],
      "sizes": [
        "sm",
        "md",
        "lg"
      ],
      "examples": [
        {
          "name": "Default",
          "code": "args: {\n    name: 'default',\n    label: 'Choose an option',\n    children: (\n      <>\n        <Radio value=\"option1\" label=\"Option 1\" />\n        <Radio value=\"option2\" label=\"Option 2\" />\n        <Radio value=\"option3\" label=\"Option 3\" />\n      </>\n    ),",
          "description": "/**"
        },
        {
          "name": "WithDefaultValue",
          "code": "args: {\n    name: 'withDefault',\n    label: 'Choose your favorite color',\n    defaultValue: 'blue',\n    children: (\n      <>\n        <Radio value=\"red\" label=\"Red\" />\n        <Radio value=\"blue\" label=\"Blue\" />\n        <Radio value=\"green\" label=\"Green\" />\n      </>\n    ),",
          "description": "/**"
        },
        {
          "name": "Controlled",
          "code": "render: () => {\n    const ControlledExample = () => {\n      const [value, setValue] = useState('option2');\n\n      return (\n        <div className=\"space-y-4\">\n          <RadioGroup\n            name=\"controlled\"\n            label=\"Controlled radio group\"\n            value={value",
          "description": "/**"
        },
        {
          "name": "WithDescriptions",
          "code": "args: {\n    name: 'withDescriptions',\n    label: 'Select a plan',\n    children: (\n      <>\n        <Radio\n          value=\"free\"\n          label=\"Free Plan\"\n          description=\"Perfect for trying out our service\"\n        />\n        <Radio\n          value=\"basic\"\n          label=\"Basic Plan\"\n          description=\"$10/month - For individuals and small projects\"\n        />\n        <Radio\n          value=\"pro\"\n          label=\"Pro Plan\"\n          description=\"$25/month - For teams and advanced features\"\n        />\n        <Radio\n          value=\"enterprise\"\n          label=\"Enterprise Plan\"\n          description=\"Custom pricing - For large organizations\"\n        />\n      </>\n    ),",
          "description": "/**"
        },
        {
          "name": "SizeSmall",
          "code": "args: {\n    name: 'sizeSmall',\n    size: 'sm',\n    label: 'Small radio buttons',\n    children: (\n      <>\n        <Radio value=\"option1\" label=\"Small option 1\" />\n        <Radio value=\"option2\" label=\"Small option 2\" />\n        <Radio value=\"option3\" label=\"Small option 3\" />\n      </>\n    ),",
          "description": "/**"
        },
        {
          "name": "SizeMedium",
          "code": "args: {\n    name: 'sizeMedium',\n    size: 'md',\n    label: 'Medium radio buttons',\n    children: (\n      <>\n        <Radio value=\"option1\" label=\"Medium option 1\" />\n        <Radio value=\"option2\" label=\"Medium option 2\" />\n        <Radio value=\"option3\" label=\"Medium option 3\" />\n      </>\n    ),",
          "description": "/**"
        },
        {
          "name": "SizeLarge",
          "code": "args: {\n    name: 'sizeLarge',\n    size: 'lg',\n    label: 'Large radio buttons',\n    children: (\n      <>\n        <Radio value=\"option1\" label=\"Large option 1\" />\n        <Radio value=\"option2\" label=\"Large option 2\" />\n        <Radio value=\"option3\" label=\"Large option 3\" />\n      </>\n    ),",
          "description": "/**"
        },
        {
          "name": "HorizontalOrientation",
          "code": "args: {\n    name: 'horizontal',\n    orientation: 'horizontal',\n    label: 'Choose a size',\n    children: (\n      <>\n        <Radio value=\"s\" label=\"Small\" />\n        <Radio value=\"m\" label=\"Medium\" />\n        <Radio value=\"l\" label=\"Large\" />\n        <Radio value=\"xl\" label=\"Extra Large\" />\n      </>\n    ),",
          "description": "/**"
        },
        {
          "name": "DisabledGroup",
          "code": "args: {\n    name: 'disabledGroup',\n    label: 'Disabled group',\n    disabled: true,\n    defaultValue: 'option2',\n    children: (\n      <>\n        <Radio value=\"option1\" label=\"Option 1\" />\n        <Radio value=\"option2\" label=\"Option 2\" />\n        <Radio value=\"option3\" label=\"Option 3\" />\n      </>\n    ),",
          "description": "/**"
        },
        {
          "name": "IndividualDisabled",
          "code": "args: {\n    name: 'individualDisabled',\n    label: 'Some options disabled',\n    children: (\n      <>\n        <Radio value=\"option1\" label=\"Available option\" />\n        <Radio value=\"option2\" label=\"Disabled option\" disabled />\n        <Radio value=\"option3\" label=\"Another available option\" />\n        <Radio value=\"option4\" label=\"Another disabled option\" disabled />\n      </>\n    ),",
          "description": "/**"
        },
        {
          "name": "ErrorState",
          "code": "args: {\n    name: 'errorState',\n    label: 'Select a payment method',\n    error: true,\n    errorMessage: 'Please select a payment method to continue',\n    required: true,\n    children: (\n      <>\n        <Radio value=\"credit\" label=\"Credit Card\" />\n        <Radio value=\"debit\" label=\"Debit Card\" />\n        <Radio value=\"paypal\" label=\"PayPal\" />\n      </>\n    ),",
          "description": "/**"
        },
        {
          "name": "WithHelperText",
          "code": "args: {\n    name: 'helperText',\n    label: 'Notification preferences',\n    helperText: 'Choose how you want to receive notifications',\n    children: (\n      <>\n        <Radio value=\"email\" label=\"Email only\" />\n        <Radio value=\"sms\" label=\"SMS only\" />\n        <Radio value=\"both\" label=\"Both email and SMS\" />\n      </>\n    ),",
          "description": "/**"
        },
        {
          "name": "RequiredField",
          "code": "args: {\n    name: 'required',\n    label: 'Select your country',\n    required: true,\n    helperText: 'This field is required',\n    children: (\n      <>\n        <Radio value=\"us\" label=\"United States\" />\n        <Radio value=\"uk\" label=\"United Kingdom\" />\n        <Radio value=\"ca\" label=\"Canada\" />\n        <Radio value=\"au\" label=\"Australia\" />\n      </>\n    ),",
          "description": "/**"
        },
        {
          "name": "FormExample",
          "code": "render: () => {\n    const FormExampleComponent = () => {\n      const [deliveryMethod, setDeliveryMethod] = useState('');\n      const [submitted, setSubmitted] = useState(false);\n\n      const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n        setSubmitted(true);",
          "description": "/**"
        },
        {
          "name": "AllSizes",
          "code": "render: () => (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Small</h3>\n        <RadioGroup name=\"small\" size=\"sm\" defaultValue=\"option1\">\n          <Radio value=\"option1\" label=\"Small option 1\" description=\"Small description\" />\n          <Radio value=\"option2\" label=\"Small option 2\" description=\"Small description\" />\n        </RadioGroup>\n      </div>\n\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Medium (Default)</h3>\n        <RadioGroup name=\"medium\" size=\"md\" defaultValue=\"option1\">\n          <Radio value=\"option1\" label=\"Medium option 1\" description=\"Medium description\" />\n          <Radio value=\"option2\" label=\"Medium option 2\" description=\"Medium description\" />\n        </RadioGroup>\n      </div>\n\n      <div>\n        <h3 className=\"text-lg font-semibold mb-4\">Large</h3>\n        <RadioGroup name=\"large\" size=\"lg\" defaultValue=\"option1\">\n          <Radio value=\"option1\" label=\"Large option 1\" description=\"Large description\" />\n          <Radio value=\"option2\" label=\"Large option 2\" description=\"Large description\" />\n        </RadioGroup>\n      </div>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "KeyboardNavigation",
          "code": "render: () => (\n    <div className=\"space-y-4\">\n      <div className=\"p-4 bg-surface-muted rounded-md\">\n        <h4 className=\"font-semibold mb-2\">Keyboard Navigation Instructions</h4>\n        <ul className=\"text-sm text-text-muted space-y-1\">\n          <li>• Use <kbd className=\"px-1 py-0.5 bg-white border border-border rounded text-xs\">Tab</kbd> to focus the radio group</li>\n          <li>• Use <kbd className=\"px-1 py-0.5 bg-white border border-border rounded text-xs\">Arrow Down</kbd> or <kbd className=\"px-1 py-0.5 bg-white border border-border rounded text-xs\">Arrow Right</kbd> to move to the next option</li>\n          <li>• Use <kbd className=\"px-1 py-0.5 bg-white border border-border rounded text-xs\">Arrow Up</kbd> or <kbd className=\"px-1 py-0.5 bg-white border border-border rounded text-xs\">Arrow Left</kbd> to move to the previous option</li>\n          <li>• Navigation wraps around at the start/end</li>\n        </ul>\n      </div>\n\n      <RadioGroup\n        name=\"keyboardDemo\"\n        label=\"Try keyboard navigation\"\n        defaultValue=\"option2\"\n      >\n        <Radio value=\"option1\" label=\"First option\" />\n        <Radio value=\"option2\" label=\"Second option (pre-selected)\" />\n        <Radio value=\"option3\" label=\"Third option\" />\n        <Radio value=\"option4\" label=\"Fourth option\" />\n      </RadioGroup>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "CustomStyling",
          "code": "args: {\n    name: 'customStyling',\n    label: 'Custom styled radio group',\n    className: 'p-4 bg-surface-muted rounded-lg',\n    children: (\n      <>\n        <Radio\n          value=\"option1\"\n          label=\"Custom option 1\"\n          className=\"hover:bg-surface-hover p-2 rounded-md transition-colors\"\n        />\n        <Radio\n          value=\"option2\"\n          label=\"Custom option 2\"\n          className=\"hover:bg-surface-hover p-2 rounded-md transition-colors\"\n        />\n        <Radio\n          value=\"option3\"\n          label=\"Custom option 3\"\n          className=\"hover:bg-surface-hover p-2 rounded-md transition-colors\"\n        />\n      </>\n    ),",
          "description": "/**"
        }
      ],
      "accessibility": {
        "keyboardNavigation": "'Atoms/Radio',",
        "screenReaderSupport": "'Atoms/Radio',",
        "ariaAttributes": [
          "aria-checked",
          "aria-describedby",
          "aria-labelledby",
          "aria-required",
          "aria-invalid"
        ],
        "focusManagement": "Includes focus management"
      },
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/radio/Radio.tsx",
      "storyPath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/radio/Radio.stories.tsx",
      "since": "0.1.0"
    },
    {
      "name": "Spinner",
      "category": "atoms",
      "description": "* This component provides a visual loading indicator with multiple variants:",
      "props": [
        {
          "name": "variant",
          "type": "SpinnerVariant",
          "description": "/* Visual variant of the spinner",
          "required": false,
          "defaultValue": "md"
        },
        {
          "name": "size",
          "type": "SpinnerSize",
          "description": "/* Size of the spinner",
          "required": false,
          "defaultValue": "primary"
        },
        {
          "name": "color",
          "type": "SpinnerColor",
          "description": "/* Color variant matching the theme",
          "required": false,
          "defaultValue": "normal"
        },
        {
          "name": "speed",
          "type": "SpinnerSpeed",
          "description": "/* Animation speed",
          "required": false,
          "defaultValue": "Loading..."
        },
        {
          "name": "label",
          "type": "string",
          "description": "/* Accessible label for screen readers",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "center",
          "type": "boolean",
          "description": "/* Whether to center the spinner in its container",
          "required": false
        }
      ],
      "variants": [
        "circular",
        "dots",
        "bars"
      ],
      "sizes": [
        "xs",
        "sm",
        "md",
        "lg"
      ],
      "examples": [
        {
          "name": "Default",
          "code": "args: {",
          "description": "/**"
        },
        {
          "name": "Variants",
          "code": "render: () => (\n    <div className=\"flex items-center gap-8\">\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner variant=\"circular\" />\n        <span className=\"text-sm text-text-secondary\">Circular</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner variant=\"dots\" />\n        <span className=\"text-sm text-text-secondary\">Dots</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner variant=\"bars\" />\n        <span className=\"text-sm text-text-secondary\">Bars</span>\n      </div>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Sizes",
          "code": "render: () => (\n    <div className=\"flex items-end gap-8\">\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner size=\"xs\" />\n        <span className=\"text-xs text-text-secondary\">XS</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner size=\"sm\" />\n        <span className=\"text-xs text-text-secondary\">SM</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner size=\"md\" />\n        <span className=\"text-xs text-text-secondary\">MD</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner size=\"lg\" />\n        <span className=\"text-xs text-text-secondary\">LG</span>\n      </div>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Colors",
          "code": "render: () => (\n    <div className=\"flex items-center gap-8\">\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner color=\"primary\" />\n        <span className=\"text-xs text-text-secondary\">Primary</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner color=\"secondary\" />\n        <span className=\"text-xs text-text-secondary\">Secondary</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner color=\"success\" />\n        <span className=\"text-xs text-text-secondary\">Success</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner color=\"warning\" />\n        <span className=\"text-xs text-text-secondary\">Warning</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner color=\"error\" />\n        <span className=\"text-xs text-text-secondary\">Error</span>\n      </div>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Speeds",
          "code": "render: () => (\n    <div className=\"flex items-center gap-8\">\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner speed=\"slow\" />\n        <span className=\"text-xs text-text-secondary\">Slow</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner speed=\"normal\" />\n        <span className=\"text-xs text-text-secondary\">Normal</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner speed=\"fast\" />\n        <span className=\"text-xs text-text-secondary\">Fast</span>\n      </div>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "DotsVariant",
          "code": "render: () => (\n    <div className=\"flex items-end gap-8\">\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner variant=\"dots\" size=\"xs\" />\n        <span className=\"text-xs text-text-secondary\">XS</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner variant=\"dots\" size=\"sm\" />\n        <span className=\"text-xs text-text-secondary\">SM</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner variant=\"dots\" size=\"md\" />\n        <span className=\"text-xs text-text-secondary\">MD</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner variant=\"dots\" size=\"lg\" />\n        <span className=\"text-xs text-text-secondary\">LG</span>\n      </div>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "BarsVariant",
          "code": "render: () => (\n    <div className=\"flex items-end gap-8\">\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner variant=\"bars\" size=\"xs\" />\n        <span className=\"text-xs text-text-secondary\">XS</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner variant=\"bars\" size=\"sm\" />\n        <span className=\"text-xs text-text-secondary\">SM</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner variant=\"bars\" size=\"md\" />\n        <span className=\"text-xs text-text-secondary\">MD</span>\n      </div>\n      <div className=\"flex flex-col items-center gap-2\">\n        <Spinner variant=\"bars\" size=\"lg\" />\n        <span className=\"text-xs text-text-secondary\">LG</span>\n      </div>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Centered",
          "code": "render: () => (\n    <div className=\"relative h-64 rounded-lg border-2 border-dashed border-border bg-surface-muted\">\n      <Spinner center size=\"lg\" />\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "CustomLabel",
          "code": "args: {\n    label: 'Fetching user data...',",
          "description": "/**"
        },
        {
          "name": "LoadingButton",
          "code": "render: () => (\n    <button\n      className=\"inline-flex items-center gap-2 rounded-md bg-brand-600 px-4 py-2 text-white hover:bg-brand-700\"\n      disabled\n    >\n      <Spinner size=\"sm\" color=\"inherit\" />\n      Loading...\n    </button>\n  ),",
          "description": "/**"
        },
        {
          "name": "InlineWithText",
          "code": "render: () => (\n    <div className=\"flex items-center gap-2 text-text\">\n      <Spinner size=\"sm\" />\n      <span>Loading data...</span>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "CardLoading",
          "code": "render: () => (\n    <div className=\"w-80 rounded-lg border border-border bg-surface p-6\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-lg font-semibold text-text\">User Profile</h3>\n        <Spinner size=\"sm\" />\n      </div>\n      <div className=\"mt-4 space-y-2\">\n        <div className=\"h-4 animate-pulse rounded bg-surface-muted\" />\n        <div className=\"h-4 w-3/4 animate-pulse rounded bg-surface-muted\" />\n        <div className=\"h-4 w-1/2 animate-pulse rounded bg-surface-muted\" />\n      </div>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "OverlayLoading",
          "code": "render: () => (\n    <div className=\"relative h-96 rounded-lg bg-surface\">\n      <div className=\"absolute inset-0 flex items-center justify-center bg-background/50 backdrop-blur-sm\">\n        <div className=\"flex flex-col items-center gap-3\">\n          <Spinner size=\"lg\" />\n          <p className=\"text-sm text-text-secondary\">Processing your request...</p>\n        </div>\n      </div>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "VariantsWithColors",
          "code": "render: () => (\n    <div className=\"space-y-6\">\n      <div>\n        <h4 className=\"mb-3 text-sm font-medium text-text\">Circular</h4>\n        <div className=\"flex items-center gap-4\">\n          <Spinner variant=\"circular\" color=\"primary\" />\n          <Spinner variant=\"circular\" color=\"success\" />\n          <Spinner variant=\"circular\" color=\"warning\" />\n          <Spinner variant=\"circular\" color=\"error\" />\n        </div>\n      </div>\n      <div>\n        <h4 className=\"mb-3 text-sm font-medium text-text\">Dots</h4>\n        <div className=\"flex items-center gap-4\">\n          <Spinner variant=\"dots\" color=\"primary\" />\n          <Spinner variant=\"dots\" color=\"success\" />\n          <Spinner variant=\"dots\" color=\"warning\" />\n          <Spinner variant=\"dots\" color=\"error\" />\n        </div>\n      </div>\n      <div>\n        <h4 className=\"mb-3 text-sm font-medium text-text\">Bars</h4>\n        <div className=\"flex items-center gap-4\">\n          <Spinner variant=\"bars\" color=\"primary\" />\n          <Spinner variant=\"bars\" color=\"success\" />\n          <Spinner variant=\"bars\" color=\"warning\" />\n          <Spinner variant=\"bars\" color=\"error\" />\n        </div>\n      </div>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "PageLoading",
          "code": "render: () => (\n    <div className=\"relative h-screen max-h-96 rounded-lg bg-gradient-to-br from-surface to-surface-muted\">\n      <Spinner center size=\"lg\" color=\"primary\" />\n    </div>\n  ),",
          "description": "/**"
        }
      ],
      "accessibility": {
        "screenReaderSupport": "'Atoms/Spinner',",
        "wcagCompliance": "WCAG 2.2 AA compliant",
        "ariaAttributes": [
          "aria-hidden",
          "aria-live",
          "aria-busy"
        ]
      },
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/spinner/Spinner.tsx",
      "storyPath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/spinner/Spinner.stories.tsx",
      "since": "0.1.0"
    },
    {
      "name": "Stack",
      "category": "atoms",
      "description": "* A flexible stack layout component that:",
      "props": [
        {
          "name": "direction",
          "type": "StackDirection",
          "description": "/* Direction of the stack",
          "required": false,
          "defaultValue": "4"
        },
        {
          "name": "gap",
          "type": "StackGap",
          "description": "/* Gap between stack items (Carbon spacing scale)",
          "required": false,
          "defaultValue": "stretch"
        },
        {
          "name": "align",
          "type": "StackAlign",
          "description": "/* Align items along cross axis",
          "required": false,
          "defaultValue": "start"
        },
        {
          "name": "justify",
          "type": "StackJustify",
          "description": "/* Justify items along main axis",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "wrap",
          "type": "boolean",
          "description": "/* Whether items should wrap",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "isFullWidth",
          "type": "boolean",
          "description": "/* Whether stack should take full width",
          "required": false
        },
        {
          "name": "divider",
          "type": "React.ReactNode",
          "description": "/* Divider element to show between items",
          "required": false
        }
      ],
      "variants": [],
      "examples": [],
      "accessibility": {},
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/stack/Stack.tsx",
      "since": "0.2.0"
    },
    {
      "name": "Switch",
      "category": "atoms",
      "description": "* This component provides an accessible toggle switch with:",
      "props": [
        {
          "name": "variant",
          "type": "SwitchVariant",
          "description": "/* Visual variant of the switch",
          "required": false,
          "defaultValue": "md"
        },
        {
          "name": "size",
          "type": "SwitchSize",
          "description": "/* Size of the switch",
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "description": "/* Label text for the switch",
          "required": false,
          "defaultValue": "right"
        },
        {
          "name": "labelPosition",
          "type": "SwitchLabelPosition",
          "description": "/* Position of the label relative to the switch",
          "required": false
        },
        {
          "name": "checked",
          "type": "boolean",
          "description": "/* Whether the switch is checked (controlled)",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "defaultChecked",
          "type": "boolean",
          "description": "/* Default checked state (uncontrolled)",
          "required": false
        },
        {
          "name": "onChange",
          "type": "(checked: boolean) => void",
          "description": "/* Callback when the checked state changes",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "/* Whether the switch is disabled",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "description": "/* Whether the switch is required",
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "description": "/* Name attribute for form submission",
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "description": "/* Value attribute for form submission",
          "required": false
        },
        {
          "name": "className",
          "type": "string",
          "description": "/* Additional CSS class name",
          "required": false
        },
        {
          "name": "id",
          "type": "string",
          "description": "/* ID for the switch element",
          "required": false
        }
      ],
      "variants": [
        "primary",
        "secondary",
        "success"
      ],
      "sizes": [
        "sm",
        "md",
        "lg"
      ],
      "examples": [
        {
          "name": "Default",
          "code": "args: {\n    label: 'Enable notifications',",
          "description": "/**"
        },
        {
          "name": "WithoutLabel",
          "code": "args: {\n    'aria-label': 'Toggle feature',",
          "description": "/**"
        },
        {
          "name": "DefaultChecked",
          "code": "args: {\n    label: 'Enable notifications',\n    defaultChecked: true,",
          "description": "/**"
        },
        {
          "name": "Controlled",
          "code": "render: function ControlledExample() {\n    const [checked, setChecked] = useState(false);\n    return (\n      <div className=\"space-y-4\">\n        <Switch\n          label=\"Enable notifications\"\n          checked={checked",
          "description": "/**"
        },
        {
          "name": "Sizes",
          "code": "render: () => (\n    <div className=\"space-y-4\">\n      <Switch label=\"Small switch\" size=\"sm\" />\n      <Switch label=\"Medium switch (default)\" size=\"md\" />\n      <Switch label=\"Large switch\" size=\"lg\" />\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Variants",
          "code": "render: () => (\n    <div className=\"space-y-4\">\n      <Switch label=\"Primary variant (default)\" variant=\"primary\" defaultChecked />\n      <Switch label=\"Secondary variant\" variant=\"secondary\" defaultChecked />\n      <Switch label=\"Success variant\" variant=\"success\" defaultChecked />\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "LabelPositions",
          "code": "render: () => (\n    <div className=\"space-y-4\">\n      <Switch label=\"Label on the right (default)\" labelPosition=\"right\" />\n      <Switch label=\"Label on the left\" labelPosition=\"left\" />\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Disabled",
          "code": "render: () => (\n    <div className=\"space-y-4\">\n      <Switch label=\"Disabled unchecked\" disabled />\n      <Switch label=\"Disabled checked\" disabled defaultChecked />\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Required",
          "code": "args: {\n    label: 'Accept terms and conditions',\n    isRequired: true,",
          "description": "/**"
        },
        {
          "name": "FormIntegration",
          "code": "render: function FormExample() {\n    const [formData, setFormData] = useState({\n      notifications: false,\n      marketing: false,\n      darkMode: true,",
          "description": "/**"
        },
        {
          "name": "Playground",
          "code": "render: () => (\n    <div className=\"space-y-6\">\n      <div className=\"space-y-3\">\n        <h3 className=\"text-lg font-semibold\">Notification Settings</h3>\n        <Switch\n          label=\"Push notifications\"\n          variant=\"primary\"\n          size=\"md\"\n          defaultChecked\n        />\n        <Switch\n          label=\"Email notifications\"\n          variant=\"primary\"\n          size=\"md\"\n        />\n        <Switch\n          label=\"SMS notifications\"\n          variant=\"primary\"\n          size=\"md\"\n          disabled\n        />\n      </div>\n\n      <div className=\"space-y-3\">\n        <h3 className=\"text-lg font-semibold\">Privacy Settings</h3>\n        <Switch\n          label=\"Public profile\"\n          variant=\"secondary\"\n          size=\"sm\"\n          labelPosition=\"left\"\n        />\n        <Switch\n          label=\"Show online status\"\n          variant=\"secondary\"\n          size=\"sm\"\n          labelPosition=\"left\"\n          defaultChecked\n        />\n      </div>\n\n      <div className=\"space-y-3\">\n        <h3 className=\"text-lg font-semibold\">Required Settings</h3>\n        <Switch\n          label=\"Accept terms and conditions\"\n          variant=\"success\"\n          size=\"lg\"\n          isRequired\n        />\n      </div>\n    </div>\n  ),",
          "description": "/**"
        }
      ],
      "accessibility": {
        "keyboardNavigation": "'Atoms/Switch',",
        "screenReaderSupport": "'Atoms/Switch',",
        "wcagCompliance": "WCAG 2.2 AA compliant",
        "ariaAttributes": [
          "aria-label",
          "aria-labelledby",
          "aria-describedby",
          "aria-checked",
          "aria-required",
          "aria-hidden"
        ],
        "focusManagement": "Includes focus management"
      },
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/switch/Switch.tsx",
      "storyPath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/switch/Switch.stories.tsx",
      "since": "0.1.0"
    },
    {
      "name": "Tag",
      "category": "atoms",
      "description": "Tag component",
      "props": [
        {
          "name": "variant",
          "type": "TagVariant",
          "description": "",
          "required": false
        },
        {
          "name": "size",
          "type": "TagSize",
          "description": "",
          "required": false
        },
        {
          "name": "removable",
          "type": "boolean",
          "description": "",
          "required": false
        },
        {
          "name": "onRemove",
          "type": "() => void",
          "description": "",
          "required": false
        }
      ],
      "variants": [
        "neutral",
        "success",
        "warning",
        "danger",
        "info"
      ],
      "sizes": [
        "sm",
        "md"
      ],
      "examples": [
        {
          "name": "Variants",
          "code": "render: () => (\n    <div className=\"flex flex-wrap gap-3\">\n      <Tag variant=\"neutral\">Neutral</Tag>\n      <Tag variant=\"success\">Success</Tag>\n      <Tag variant=\"warning\">Warning</Tag>\n      <Tag variant=\"danger\">Danger</Tag>\n      <Tag variant=\"info\">Info</Tag>\n    </div>\n  ),",
          "description": ""
        }
      ],
      "accessibility": {
        "ariaAttributes": [
          "aria-label"
        ],
        "focusManagement": "Includes focus management"
      },
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/tag/Tag.tsx",
      "storyPath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/atoms/tag/Tag.stories.tsx",
      "since": "0.1.0"
    },
    {
      "name": "Alert",
      "category": "molecules",
      "description": "* This component provides a flexible alert system with:",
      "props": [
        {
          "name": "variant",
          "type": "AlertVariant",
          "description": "/* Visual variant",
          "required": false
        },
        {
          "name": "title",
          "type": "string",
          "description": "/* Alert title",
          "required": false
        },
        {
          "name": "description",
          "type": "ReactNode",
          "description": "/* Alert description/content",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "dismissible",
          "type": "boolean",
          "description": "/* Whether the alert can be dismissed",
          "required": false
        },
        {
          "name": "onDismiss",
          "type": "() => void",
          "description": "/* Callback fired when the alert is dismissed",
          "required": false
        },
        {
          "name": "icon",
          "type": "ReactNode",
          "description": "/* Custom icon to override the default variant icon",
          "required": false,
          "defaultValue": "true"
        },
        {
          "name": "showIcon",
          "type": "boolean",
          "description": "/* Whether to show an icon",
          "required": false
        },
        {
          "name": "action",
          "type": "ReactNode",
          "description": "/* Action button element (e.g., Button component)",
          "required": false,
          "defaultValue": "Based on variant"
        }
      ],
      "variants": [
        "info",
        "success",
        "warning",
        "error"
      ],
      "examples": [
        {
          "name": "Default",
          "code": "args: {\n    children: 'This is an informational alert message.',",
          "description": "/**"
        },
        {
          "name": "Info",
          "code": "args: {\n    variant: 'info',\n    title: 'Did you know?',\n    description: 'You can customize your dashboard layout by dragging and dropping widgets.',",
          "description": "/**"
        },
        {
          "name": "Success",
          "code": "args: {\n    variant: 'success',\n    title: 'Success!',\n    description: 'Your changes have been saved successfully.',",
          "description": "/**"
        },
        {
          "name": "Warning",
          "code": "args: {\n    variant: 'warning',\n    title: 'Warning',\n    description: 'This action cannot be undone. Please review before proceeding.',",
          "description": "/**"
        },
        {
          "name": "Error",
          "code": "args: {\n    variant: 'error',\n    title: 'Error',\n    description: 'Failed to save changes. Please try again.',",
          "description": "/**"
        },
        {
          "name": "Dismissible",
          "code": "args: {\n    variant: 'info',\n    title: 'New Feature',\n    description: 'Check out our new analytics dashboard!',\n    dismissible: true,",
          "description": "/**"
        },
        {
          "name": "WithAction",
          "code": "args: {\n    variant: 'warning',\n    title: 'Update Available',\n    description: 'A new version of the application is available.',\n    action: (\n      <button\n        type=\"button\"\n        className=\"rounded bg-yellow-600 px-3 py-1.5 text-sm font-medium text-white hover:bg-yellow-700\"\n      >\n        Update Now\n      </button>\n    ),",
          "description": "/**"
        },
        {
          "name": "WithActionAndDismiss",
          "code": "args: {\n    variant: 'success',\n    title: 'Trial Extended',\n    description: 'Your trial has been extended by 7 days.',\n    dismissible: true,\n    action: (\n      <button\n        type=\"button\"\n        className=\"rounded bg-green-600 px-3 py-1.5 text-sm font-medium text-white hover:bg-green-700\"\n      >\n        Upgrade\n      </button>\n    ),",
          "description": "/**"
        },
        {
          "name": "NoIcon",
          "code": "args: {\n    variant: 'info',\n    title: 'Clean and Simple',\n    description: 'This alert has no icon for a cleaner look.',\n    showIcon: false,",
          "description": "/**"
        },
        {
          "name": "TitleOnly",
          "code": "args: {\n    variant: 'success',\n    title: 'Changes saved',",
          "description": "/**"
        },
        {
          "name": "DescriptionOnly",
          "code": "args: {\n    variant: 'info',\n    description: 'This is an alert with just a description and no title.',",
          "description": "/**"
        },
        {
          "name": "CustomIcon",
          "code": "args: {\n    variant: 'info',\n    title: 'Custom Icon',\n    description: 'This alert uses a custom rocket icon instead of the default.',\n    icon: (\n      <svg\n        className=\"h-5 w-5\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        viewBox=\"0 0 24 24\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          strokeWidth={2",
          "description": "/**"
        },
        {
          "name": "LongContent",
          "code": "args: {\n    variant: 'warning',\n    title: 'Important Security Notice',\n    description:\n      'We have detected unusual activity on your account from an unfamiliar location. If this was not you, please change your password immediately and review your recent account activity. We recommend enabling two-factor authentication for enhanced security. You can do this by visiting your account settings and following the security setup wizard.',\n    dismissible: true,",
          "description": "/**"
        },
        {
          "name": "MultipleAlerts",
          "code": "render: () => (\n    <div className=\"space-y-4\">\n      <Alert variant=\"error\" title=\"Error\" description=\"Failed to load user data.\" dismissible />\n      <Alert variant=\"warning\" title=\"Warning\" description=\"Your session will expire soon.\" />\n      <Alert variant=\"info\" title=\"Info\" description=\"New features are now available.\" />\n      <Alert variant=\"success\" title=\"Success\" description=\"Profile updated successfully.\" />\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "AllVariants",
          "code": "render: () => (\n    <div className=\"space-y-4\">\n      <Alert\n        variant=\"info\"\n        title=\"Information\"\n        description=\"This is an informational message.\"\n      />\n      <Alert\n        variant=\"success\"\n        title=\"Success\"\n        description=\"This is a success message.\"\n      />\n      <Alert\n        variant=\"warning\"\n        title=\"Warning\"\n        description=\"This is a warning message.\"\n      />\n      <Alert\n        variant=\"error\"\n        title=\"Error\"\n        description=\"This is an error message.\"\n      />\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "DismissAnimation",
          "code": "render: () => {\n    const DismissExample = () => {\n      const [visible, setVisible] = useState(true);\n\n      return (\n        <div className=\"space-y-4\">\n          {visible && (\n            <Alert\n              variant=\"info\"\n              title=\"Dismissible Alert\"\n              description=\"Click the X button to see the smooth dismiss animation.\"\n              dismissible\n              onDismiss={() => setVisible(false)",
          "description": "/**"
        },
        {
          "name": "ComplexExample",
          "code": "render: () => (\n    <Alert\n      variant=\"warning\"\n      title=\"Payment Method Expiring\"\n      description=\"Your credit card ending in 4242 will expire at the end of this month.\"\n      dismissible\n      action={\n        <button\n          type=\"button\"\n          className=\"rounded bg-yellow-600 px-3 py-1.5 text-sm font-medium text-white hover:bg-yellow-700\"\n        >\n          Update Card\n        </button>",
          "description": "/**"
        },
        {
          "name": "Minimal",
          "code": "args: {\n    variant: 'success',\n    description: 'Copied to clipboard',\n    showIcon: false,",
          "description": "/**"
        },
        {
          "name": "CustomAriaLive",
          "code": "args: {\n    variant: 'info',\n    title: 'Assertive Announcement',\n    description: 'This info alert uses assertive aria-live for immediate announcement.',\n    'aria-live': 'assertive',",
          "description": "/**"
        }
      ],
      "accessibility": {
        "keyboardNavigation": "'Molecules/Alert',",
        "screenReaderSupport": "\"polite\" for info/success, \"assertive\" for warning/error",
        "wcagCompliance": "WCAG 2.2 AA compliant",
        "ariaAttributes": [
          "aria-live",
          "aria-hidden",
          "aria-label"
        ],
        "focusManagement": "Includes focus management"
      },
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/molecules/alert/Alert.tsx",
      "storyPath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/molecules/alert/Alert.stories.tsx",
      "since": "0.1.0"
    },
    {
      "name": "Select",
      "category": "molecules",
      "description": "* This component provides a custom dropdown select that:",
      "props": [
        {
          "name": "options",
          "type": "SelectOption[]",
          "description": "/* Array of options to display in the dropdown",
          "required": true
        },
        {
          "name": "value",
          "type": "string",
          "description": "/* Controlled value (for single select)",
          "required": false
        },
        {
          "name": "defaultValue",
          "type": "string",
          "description": "/* Default value for uncontrolled mode (for single select)",
          "required": false
        },
        {
          "name": "values",
          "type": "string[]",
          "description": "/* Controlled values (for multiple select)",
          "required": false
        },
        {
          "name": "defaultValues",
          "type": "string[]",
          "description": "/* Default values for uncontrolled mode (for multiple select)",
          "required": false
        },
        {
          "name": "onChange",
          "type": "(value: string | string[]) => void",
          "description": "/* Callback when value changes",
          "required": false,
          "defaultValue": "md"
        },
        {
          "name": "size",
          "type": "SelectSize",
          "description": "/* Size of the select",
          "required": false,
          "defaultValue": "default"
        },
        {
          "name": "variant",
          "type": "SelectVariant",
          "description": "/* Visual variant",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "/* Whether the select is disabled",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "multiple",
          "type": "boolean",
          "description": "/* Whether multiple selection is enabled",
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "description": "/* Placeholder text when no selection is made",
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "description": "/* Label text for the select",
          "required": false
        },
        {
          "name": "helperText",
          "type": "string",
          "description": "/* Helper text displayed below the select",
          "required": false
        },
        {
          "name": "error",
          "type": "string",
          "description": "/* Error message displayed below the select (sets variant to 'error')",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "isRequired",
          "type": "boolean",
          "description": "/* Whether the select is required",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "isFullWidth",
          "type": "boolean",
          "description": "/* Whether the select should take full width of its container",
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "description": "/* Name attribute for form submission",
          "required": false
        }
      ],
      "variants": [
        "default",
        "error",
        "success"
      ],
      "sizes": [
        "sm",
        "md",
        "lg"
      ],
      "examples": [
        {
          "name": "Default",
          "code": "args: {\n    options: countryOptions,\n    placeholder: 'Select a country',",
          "description": "/**"
        },
        {
          "name": "WithLabel",
          "code": "args: {\n    options: countryOptions,\n    label: 'Country',\n    helperText: 'Select your country of residence',\n    placeholder: 'Choose a country',",
          "description": "/**"
        },
        {
          "name": "Controlled",
          "code": "render: function ControlledStory(args) {\n    const [value, setValue] = useState<string>('');\n\n    return (\n      <div className=\"space-y-4\">\n        <Select\n          {...args",
          "description": "/**"
        },
        {
          "name": "Uncontrolled",
          "code": "args: {\n    options: countryOptions,\n    defaultValue: 'ca',\n    label: 'Uncontrolled Select',\n    helperText: 'Canada is pre-selected',",
          "description": "/**"
        },
        {
          "name": "Multiple",
          "code": "render: function MultipleStory(args) {\n    const [values, setValues] = useState<string[]>([]);\n\n    return (\n      <div className=\"space-y-4\">\n        <Select\n          {...args",
          "description": "/**"
        },
        {
          "name": "MultipleWithDefaults",
          "code": "args: {\n    options: fruitOptions,\n    multiple: true,\n    defaultValues: ['apple', 'banana'],\n    label: 'Pre-selected Fruits',\n    helperText: 'Apple and Banana are pre-selected',",
          "description": "/**"
        },
        {
          "name": "SizeSmall",
          "code": "args: {\n    options: countryOptions,\n    size: 'sm',\n    label: 'Small Select',\n    placeholder: 'Select a country',",
          "description": "/**"
        },
        {
          "name": "SizeMedium",
          "code": "args: {\n    options: countryOptions,\n    size: 'md',\n    label: 'Medium Select',\n    placeholder: 'Select a country',",
          "description": "/**"
        },
        {
          "name": "SizeLarge",
          "code": "args: {\n    options: countryOptions,\n    size: 'lg',\n    label: 'Large Select',\n    placeholder: 'Select a country',",
          "description": "/**"
        },
        {
          "name": "WithError",
          "code": "args: {\n    options: countryOptions,\n    label: 'Country',\n    error: 'Please select a country',\n    isRequired: true,\n    placeholder: 'Select a country',",
          "description": "/**"
        },
        {
          "name": "WithSuccess",
          "code": "args: {\n    options: countryOptions,\n    label: 'Country',\n    variant: 'success',\n    value: 'us',\n    helperText: 'Valid selection',",
          "description": "/**"
        },
        {
          "name": "Disabled",
          "code": "args: {\n    options: countryOptions,\n    disabled: true,\n    label: 'Country',\n    placeholder: 'This select is disabled',",
          "description": "/**"
        },
        {
          "name": "DisabledWithValue",
          "code": "args: {\n    options: countryOptions,\n    disabled: true,\n    value: 'us',\n    label: 'Country',\n    helperText: 'This field cannot be modified',",
          "description": "/**"
        },
        {
          "name": "WithDisabledOptions",
          "code": "args: {\n    options: fruitOptions,\n    label: 'Available Fruits',\n    placeholder: 'Select a fruit',\n    helperText: 'Some fruits are out of season',",
          "description": "/**"
        },
        {
          "name": "Required",
          "code": "args: {\n    options: countryOptions,\n    label: 'Country',\n    isRequired: true,\n    placeholder: 'Select a country',\n    helperText: 'This field is required',",
          "description": "/**"
        },
        {
          "name": "FullWidth",
          "code": "args: {\n    options: countryOptions,\n    label: 'Country',\n    isFullWidth: true,\n    placeholder: 'Select a country',",
          "description": "/**"
        },
        {
          "name": "FormIntegration",
          "code": "render: function FormIntegrationStory(args) {\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      const formData = new FormData(e.currentTarget);\n      const data = Object.fromEntries(formData.entries());\n      alert(`Form submitted with:\\n${JSON.stringify(data, null, 2)",
          "description": "/**"
        },
        {
          "name": "ComplexExample",
          "code": "render: function ComplexExampleStory() {\n    const [country, setCountry] = useState<string>('');\n    const [fruits, setFruits] = useState<string[]>([]);\n    const [showError, setShowError] = useState(false);\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      if (!country) {\n        setShowError(true);\n        return;",
          "description": "/**"
        },
        {
          "name": "SizeComparison",
          "code": "render: () => (\n    <div className=\"space-y-6\">\n      <Select\n        options={countryOptions",
          "description": "/**"
        },
        {
          "name": "StateComparison",
          "code": "render: () => (\n    <div className=\"space-y-6\">\n      <Select\n        options={countryOptions",
          "description": "/**"
        }
      ],
      "accessibility": {
        "keyboardNavigation": "'Molecules/Select',",
        "screenReaderSupport": "'Molecules/Select',",
        "ariaAttributes": [
          "aria-label",
          "aria-haspopup",
          "aria-expanded",
          "aria-labelledby",
          "aria-describedby",
          "aria-hidden",
          "aria-multiselectable",
          "aria-selected",
          "aria-disabled"
        ],
        "focusManagement": "Includes focus management"
      },
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/molecules/select/Select.tsx",
      "storyPath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/molecules/select/Select.stories.tsx",
      "since": "0.1.0"
    },
    {
      "name": "Stepper",
      "category": "molecules",
      "description": "Stepper component",
      "props": [
        {
          "name": "steps",
          "type": "Step[]",
          "description": "",
          "required": true
        },
        {
          "name": "currentStep",
          "type": "number",
          "description": "",
          "required": false
        },
        {
          "name": "orientation",
          "type": "StepperOrientation",
          "description": "",
          "required": false
        }
      ],
      "variants": [],
      "examples": [
        {
          "name": "Vertical",
          "code": "args: {\n    orientation: 'vertical',",
          "description": ""
        }
      ],
      "accessibility": {
        "ariaAttributes": [
          "aria-orientation",
          "aria-label"
        ]
      },
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/molecules/stepper/Stepper.tsx",
      "storyPath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/molecules/stepper/Stepper.stories.tsx",
      "since": "0.1.0"
    },
    {
      "name": "Tooltip",
      "category": "molecules",
      "description": "* This component provides an accessible tooltip with the following features:",
      "props": [
        {
          "name": "children",
          "type": "ReactElement",
          "description": "/* The element that triggers the tooltip",
          "required": true
        },
        {
          "name": "content",
          "type": "ReactNode",
          "description": "/* Content to display in the tooltip",
          "required": true,
          "defaultValue": "top"
        },
        {
          "name": "placement",
          "type": "TooltipPlacement",
          "description": "/* Placement of the tooltip relative to the trigger",
          "required": false,
          "defaultValue": "200"
        },
        {
          "name": "showDelay",
          "type": "number",
          "description": "/* Delay before showing tooltip (in milliseconds)",
          "required": false,
          "defaultValue": "0"
        },
        {
          "name": "hideDelay",
          "type": "number",
          "description": "/* Delay before hiding tooltip (in milliseconds)",
          "required": false,
          "defaultValue": "8"
        },
        {
          "name": "offset",
          "type": "number",
          "description": "/* Distance from trigger element in pixels",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "/* Whether the tooltip is disabled",
          "required": false,
          "defaultValue": "320px"
        },
        {
          "name": "maxWidth",
          "type": "string",
          "description": "/* Maximum width of the tooltip",
          "required": false
        },
        {
          "name": "className",
          "type": "string",
          "description": "/* Additional CSS class for the tooltip container",
          "required": false
        },
        {
          "name": "arrowClassName",
          "type": "string",
          "description": "/* Additional CSS class for the arrow",
          "required": false
        }
      ],
      "variants": [],
      "examples": [
        {
          "name": "Default",
          "code": "args: {\n    content: 'This is a helpful tooltip',\n    placement: 'top',",
          "description": "/**"
        },
        {
          "name": "Top",
          "code": "args: {\n    content: 'Tooltip on top',\n    placement: 'top',",
          "description": "/**"
        },
        {
          "name": "Bottom",
          "code": "args: {\n    content: 'Tooltip on bottom',\n    placement: 'bottom',",
          "description": "/**"
        },
        {
          "name": "Left",
          "code": "args: {\n    content: 'Tooltip on left',\n    placement: 'left',",
          "description": "/**"
        },
        {
          "name": "Right",
          "code": "args: {\n    content: 'Tooltip on right',\n    placement: 'right',",
          "description": "/**"
        },
        {
          "name": "AllPlacements",
          "code": "render: () => (\n    <div className=\"grid grid-cols-2 gap-8\">\n      <Tooltip content=\"Tooltip on top\" placement=\"top\">\n        <Button>Top</Button>\n      </Tooltip>\n      <Tooltip content=\"Tooltip on bottom\" placement=\"bottom\">\n        <Button>Bottom</Button>\n      </Tooltip>\n      <Tooltip content=\"Tooltip on left\" placement=\"left\">\n        <Button>Left</Button>\n      </Tooltip>\n      <Tooltip content=\"Tooltip on right\" placement=\"right\">\n        <Button>Right</Button>\n      </Tooltip>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "LongContent",
          "code": "args: {\n    content:\n      'This is a much longer tooltip with more detailed information that will wrap to multiple lines within the max-width constraint.',\n    placement: 'top',",
          "description": "/**"
        },
        {
          "name": "CustomMaxWidth",
          "code": "args: {\n    content: 'This tooltip has a custom maximum width of 200px instead of the default 320px.',\n    maxWidth: '200px',\n    placement: 'top',",
          "description": "/**"
        },
        {
          "name": "WithShowDelay",
          "code": "args: {\n    content: 'This tooltip appears after a 500ms delay',\n    showDelay: 500,\n    placement: 'top',",
          "description": "/**"
        },
        {
          "name": "WithHideDelay",
          "code": "args: {\n    content: 'This tooltip stays visible for 300ms after you stop hovering',\n    hideDelay: 300,\n    placement: 'top',",
          "description": "/**"
        },
        {
          "name": "Disabled",
          "code": "args: {\n    content: \"You won't see this\",\n    disabled: true,\n    placement: 'top',",
          "description": "/**"
        },
        {
          "name": "CustomOffset",
          "code": "args: {\n    content: 'This tooltip is 20px away from the trigger',\n    offset: 20,\n    placement: 'top',",
          "description": "/**"
        },
        {
          "name": "CustomStyling",
          "code": "args: {\n    content: 'Custom purple tooltip',\n    className: 'bg-purple-600 text-white',\n    arrowClassName: 'bg-purple-600',\n    placement: 'top',",
          "description": "/**"
        },
        {
          "name": "WithButtonVariants",
          "code": "render: () => (\n    <div className=\"flex gap-4\">\n      <Tooltip content=\"Primary button tooltip\" placement=\"top\">\n        <Button variant=\"primary\">Primary</Button>\n      </Tooltip>\n      <Tooltip content=\"Secondary button tooltip\" placement=\"top\">\n        <Button variant=\"secondary\">Secondary</Button>\n      </Tooltip>\n      <Tooltip content=\"Outline button tooltip\" placement=\"top\">\n        <Button variant=\"outline\">Outline</Button>\n      </Tooltip>\n      <Tooltip content=\"Ghost button tooltip\" placement=\"top\">\n        <Button variant=\"ghost\">Ghost</Button>\n      </Tooltip>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "WithDifferentElements",
          "code": "render: () => (\n    <div className=\"flex flex-col gap-4 items-start\">\n      <Tooltip content=\"Button tooltip\" placement=\"right\">\n        <button className=\"px-4 py-2 bg-blue-500 text-white rounded\">\n          Native Button\n        </button>\n      </Tooltip>\n      <Tooltip content=\"Link tooltip\" placement=\"right\">\n        <a href=\"#example\" className=\"text-blue-600 hover:underline\">\n          Anchor Link\n        </a>\n      </Tooltip>\n      <Tooltip content=\"Input tooltip\" placement=\"right\">\n        <input\n          type=\"text\"\n          placeholder=\"Input field\"\n          className=\"px-3 py-2 border rounded\"\n        />\n      </Tooltip>\n      <Tooltip content=\"Icon button tooltip\" placement=\"right\">\n        <button className=\"p-2 rounded-full bg-gray-200 hover:bg-gray-300\">\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            className=\"h-5 w-5\"\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke=\"currentColor\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2",
          "description": "/**"
        },
        {
          "name": "BoundaryDetection",
          "code": "render: () => (\n    <div className=\"grid grid-cols-3 gap-4 w-full\">\n      <Tooltip content=\"Top-left corner tooltip\" placement=\"top\">\n        <Button size=\"sm\">Top Left</Button>\n      </Tooltip>\n      <Tooltip content=\"Top-center tooltip\" placement=\"top\">\n        <Button size=\"sm\">Top Center</Button>\n      </Tooltip>\n      <Tooltip content=\"Top-right corner tooltip\" placement=\"top\">\n        <Button size=\"sm\">Top Right</Button>\n      </Tooltip>\n      <Tooltip content=\"Middle-left tooltip\" placement=\"left\">\n        <Button size=\"sm\">Middle Left</Button>\n      </Tooltip>\n      <Tooltip content=\"Center tooltip\" placement=\"top\">\n        <Button size=\"sm\">Center</Button>\n      </Tooltip>\n      <Tooltip content=\"Middle-right tooltip\" placement=\"right\">\n        <Button size=\"sm\">Middle Right</Button>\n      </Tooltip>\n      <Tooltip content=\"Bottom-left corner tooltip\" placement=\"bottom\">\n        <Button size=\"sm\">Bottom Left</Button>\n      </Tooltip>\n      <Tooltip content=\"Bottom-center tooltip\" placement=\"bottom\">\n        <Button size=\"sm\">Bottom Center</Button>\n      </Tooltip>\n      <Tooltip content=\"Bottom-right corner tooltip\" placement=\"bottom\">\n        <Button size=\"sm\">Bottom Right</Button>\n      </Tooltip>\n    </div>\n  ),\n  decorators: [\n    (Story) => (\n      <div className=\"min-h-[400px] p-8\">\n        <Story />\n      </div>\n    ),\n  ],",
          "description": "/**"
        },
        {
          "name": "KeyboardAccessibility",
          "code": "render: () => (\n    <div className=\"flex flex-col gap-4 items-start\">\n      <p className=\"text-sm text-gray-600 mb-2\">\n        Press Tab to navigate through buttons. Tooltips will appear on focus.\n        Press Escape to close.\n      </p>\n      <Tooltip content=\"First button - Press Escape to close\" placement=\"right\">\n        <Button>First Button</Button>\n      </Tooltip>\n      <Tooltip content=\"Second button - Tab to navigate\" placement=\"right\">\n        <Button>Second Button</Button>\n      </Tooltip>\n      <Tooltip content=\"Third button - Fully keyboard accessible\" placement=\"right\">\n        <Button>Third Button</Button>\n      </Tooltip>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Playground",
          "code": "args: {\n    content: 'Customize this tooltip using the controls below',\n    placement: 'top',\n    showDelay: 200,\n    hideDelay: 0,\n    offset: 8,\n    disabled: false,\n    maxWidth: '320px',",
          "description": "/**"
        }
      ],
      "accessibility": {
        "keyboardNavigation": "'Molecules/Tooltip',",
        "screenReaderSupport": "'Molecules/Tooltip',",
        "wcagCompliance": "WCAG 2.2 AA compliant",
        "ariaAttributes": [
          "aria-describedby",
          "aria-hidden"
        ],
        "focusManagement": "Includes focus management"
      },
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/molecules/tooltip/Tooltip.tsx",
      "storyPath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/molecules/tooltip/Tooltip.stories.tsx",
      "since": "0.1.0"
    },
    {
      "name": "Card",
      "category": "organisms",
      "description": "* This component provides a versatile card container with:",
      "props": [
        {
          "name": "variant",
          "type": "CardVariant",
          "description": "/* Visual variant of the card",
          "required": false,
          "defaultValue": "md"
        },
        {
          "name": "size",
          "type": "CardSize",
          "description": "/* Padding size",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "hover",
          "type": "boolean",
          "description": "/* Whether to show hover effects",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "clickable",
          "type": "boolean",
          "description": "/* Whether the card is clickable (renders as button with proper ARIA)",
          "required": false
        },
        {
          "name": "onClick",
          "type": "() => void",
          "description": "/* Click handler for clickable cards",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "/* Whether the card is disabled (only applies to clickable cards)",
          "required": false
        }
      ],
      "variants": [
        "elevated",
        "outlined",
        "flat"
      ],
      "sizes": [
        "sm",
        "md",
        "lg"
      ],
      "examples": [
        {
          "name": "Default",
          "code": "args: {\n    children: 'This is a default card with elevated styling',",
          "description": "/**"
        },
        {
          "name": "WithStructure",
          "code": "render: () => (\n    <Card>\n      <CardHeader>\n        <h3 className=\"text-lg font-semibold\">Card Title</h3>\n        <p className=\"text-sm text-text-muted\">Subtitle or metadata</p>\n      </CardHeader>\n      <CardBody>\n        <p>\n          This is the main content area of the card. It can contain any content\n          including text, images, or other components.\n        </p>\n      </CardBody>\n      <CardFooter>\n        <button className=\"px-4 py-2 bg-brand-600 text-white rounded-md hover:bg-brand-700\">\n          Action\n        </button>\n      </CardFooter>\n    </Card>\n  ),",
          "description": "/**"
        },
        {
          "name": "Variants",
          "code": "render: () => (\n    <div className=\"flex gap-4\">\n      <Card variant=\"elevated\">\n        <CardHeader>\n          <h4 className=\"font-semibold\">Elevated</h4>\n        </CardHeader>\n        <CardBody>Card with shadow elevation</CardBody>\n      </Card>\n      <Card variant=\"outlined\">\n        <CardHeader>\n          <h4 className=\"font-semibold\">Outlined</h4>\n        </CardHeader>\n        <CardBody>Card with border outline</CardBody>\n      </Card>\n      <Card variant=\"flat\">\n        <CardHeader>\n          <h4 className=\"font-semibold\">Flat</h4>\n        </CardHeader>\n        <CardBody>Card with flat background</CardBody>\n      </Card>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Sizes",
          "code": "render: () => (\n    <div className=\"flex gap-4\">\n      <Card size=\"sm\">\n        <CardHeader>\n          <h4 className=\"font-semibold\">Small</h4>\n        </CardHeader>\n        <CardBody>Small padding (12px)</CardBody>\n      </Card>\n      <Card size=\"md\">\n        <CardHeader>\n          <h4 className=\"font-semibold\">Medium</h4>\n        </CardHeader>\n        <CardBody>Medium padding (16px)</CardBody>\n      </Card>\n      <Card size=\"lg\">\n        <CardHeader>\n          <h4 className=\"font-semibold\">Large</h4>\n        </CardHeader>\n        <CardBody>Large padding (24px)</CardBody>\n      </Card>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "WithHover",
          "code": "render: () => (\n    <div className=\"flex gap-4\">\n      <Card variant=\"elevated\" hover>\n        <CardHeader>\n          <h4 className=\"font-semibold\">Elevated + Hover</h4>\n        </CardHeader>\n        <CardBody>Lifts up and increases shadow on hover</CardBody>\n      </Card>\n      <Card variant=\"outlined\" hover>\n        <CardHeader>\n          <h4 className=\"font-semibold\">Outlined + Hover</h4>\n        </CardHeader>\n        <CardBody>Border color changes on hover</CardBody>\n      </Card>\n      <Card variant=\"flat\" hover>\n        <CardHeader>\n          <h4 className=\"font-semibold\">Flat + Hover</h4>\n        </CardHeader>\n        <CardBody>Shadow appears on hover</CardBody>\n      </Card>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "Clickable",
          "code": "render: () => (\n    <Card\n      clickable\n      hover\n      onClick={() => alert('Card clicked!')",
          "description": "/**"
        },
        {
          "name": "ClickableDisabled",
          "code": "render: () => (\n    <Card\n      clickable\n      disabled\n      hover\n      onClick={() => alert('This should not appear')",
          "description": "/**"
        },
        {
          "name": "ProductCard",
          "code": "render: () => (\n    <Card variant=\"outlined\" hover className=\"max-w-sm\">\n      <CardHeader>\n        <div className=\"aspect-video bg-surface-muted rounded-md flex items-center justify-center mb-2\">\n          <span className=\"text-text-muted\">Product Image</span>\n        </div>\n        <h3 className=\"text-lg font-semibold\">Premium Headphones</h3>\n        <p className=\"text-sm text-text-muted\">High-quality audio experience</p>\n      </CardHeader>\n      <CardBody>\n        <p className=\"text-2xl font-bold text-brand-600\">$299.99</p>\n        <p className=\"text-sm text-text-muted mt-1\">Free shipping available</p>\n      </CardBody>\n      <CardFooter>\n        <button className=\"w-full px-4 py-2 bg-brand-600 text-white rounded-md hover:bg-brand-700\">\n          Add to Cart\n        </button>\n      </CardFooter>\n    </Card>\n  ),",
          "description": "/**"
        },
        {
          "name": "ProfileCard",
          "code": "render: () => (\n    <Card variant=\"elevated\" className=\"max-w-sm\">\n      <CardHeader>\n        <div className=\"flex items-center gap-4\">\n          <div className=\"w-16 h-16 bg-brand-600 rounded-full flex items-center justify-center text-white text-xl font-bold\">\n            JD\n          </div>\n          <div>\n            <h3 className=\"text-lg font-semibold\">John Doe</h3>\n            <p className=\"text-sm text-text-muted\">Software Engineer</p>\n          </div>\n        </div>\n      </CardHeader>\n      <CardBody>\n        <p className=\"text-sm\">\n          Passionate about building great user experiences and scalable systems.\n        </p>\n      </CardBody>\n      <CardFooter className=\"flex gap-2\">\n        <button className=\"flex-1 px-4 py-2 bg-brand-600 text-white rounded-md hover:bg-brand-700\">\n          Follow\n        </button>\n        <button className=\"flex-1 px-4 py-2 border-2 border-border text-text rounded-md hover:bg-surface-muted\">\n          Message\n        </button>\n      </CardFooter>\n    </Card>\n  ),",
          "description": "/**"
        },
        {
          "name": "StatsCard",
          "code": "render: () => (\n    <div className=\"grid grid-cols-3 gap-4\">\n      <Card variant=\"flat\" size=\"sm\">\n        <CardBody>\n          <p className=\"text-sm text-text-muted\">Total Users</p>\n          <p className=\"text-3xl font-bold mt-1\">1,234</p>\n          <p className=\"text-sm text-success mt-1\">↑ 12% this month</p>\n        </CardBody>\n      </Card>\n      <Card variant=\"flat\" size=\"sm\">\n        <CardBody>\n          <p className=\"text-sm text-text-muted\">Revenue</p>\n          <p className=\"text-3xl font-bold mt-1\">$45.2K</p>\n          <p className=\"text-sm text-success mt-1\">↑ 8% this month</p>\n        </CardBody>\n      </Card>\n      <Card variant=\"flat\" size=\"sm\">\n        <CardBody>\n          <p className=\"text-sm text-text-muted\">Active Now</p>\n          <p className=\"text-3xl font-bold mt-1\">89</p>\n          <p className=\"text-sm text-text-muted mt-1\">users online</p>\n        </CardBody>\n      </Card>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "NotificationCard",
          "code": "render: () => (\n    <Card variant=\"outlined\" size=\"sm\" className=\"max-w-md\">\n      <CardBody className=\"flex items-start gap-3\">\n        <div className=\"w-2 h-2 bg-brand-600 rounded-full mt-2\"></div>\n        <div className=\"flex-1\">\n          <p className=\"font-semibold\">New message received</p>\n          <p className=\"text-sm text-text-muted mt-1\">\n            Sarah sent you a message about the project update.\n          </p>\n          <p className=\"text-xs text-text-muted mt-2\">2 minutes ago</p>\n        </div>\n      </CardBody>\n    </Card>\n  ),",
          "description": "/**"
        }
      ],
      "accessibility": {
        "keyboardNavigation": "'Organisms/Card',",
        "screenReaderSupport": "'Organisms/Card',",
        "wcagCompliance": "WCAG 2.2 AA compliant",
        "ariaAttributes": [
          "aria-disabled"
        ],
        "focusManagement": "Includes focus management"
      },
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/organisms/card/Card.tsx",
      "storyPath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/organisms/card/Card.stories.tsx",
      "since": "0.1.0"
    },
    {
      "name": "Dialog",
      "category": "organisms",
      "description": "* This component implements a fully accessible modal dialog:",
      "props": [
        {
          "name": "isOpen",
          "type": "boolean",
          "description": "/* Whether the dialog is open",
          "required": true
        },
        {
          "name": "onClose",
          "type": "() => void",
          "description": "/* Callback when the dialog should close",
          "required": true
        },
        {
          "name": "title",
          "type": "string",
          "description": "/* Dialog title (required for accessibility)",
          "required": true
        },
        {
          "name": "description",
          "type": "string",
          "description": "/* Optional description for the dialog",
          "required": false,
          "defaultValue": "md"
        },
        {
          "name": "size",
          "type": "DialogSize",
          "description": "/* Size of the dialog",
          "required": false,
          "defaultValue": "true"
        },
        {
          "name": "closeOnBackdropClick",
          "type": "boolean",
          "description": "/* Whether clicking the backdrop closes the dialog",
          "required": false,
          "defaultValue": "true"
        },
        {
          "name": "closeOnEscape",
          "type": "boolean",
          "description": "/* Whether pressing Escape closes the dialog",
          "required": false,
          "defaultValue": "true"
        },
        {
          "name": "showCloseButton",
          "type": "boolean",
          "description": "/* Whether to show the close button",
          "required": false
        }
      ],
      "variants": [],
      "sizes": [
        "sm",
        "md",
        "lg",
        "xl",
        "full"
      ],
      "examples": [
        {
          "name": "Default",
          "code": "render: function DefaultDialog() {\n    const [isOpen, setIsOpen] = useState(false);\n\n    return (\n      <>\n        <Button onClick={() => setIsOpen(true)",
          "description": "/**"
        },
        {
          "name": "ConfirmationDialog",
          "code": "render: function ConfirmationExample() {\n    const [isOpen, setIsOpen] = useState(false);\n\n    return (\n      <>\n        <Button variant=\"danger\" onClick={() => setIsOpen(true)",
          "description": "/**"
        },
        {
          "name": "Sizes",
          "code": "render: function SizesExample() {\n    const [size, setSize] = useState<'sm' | 'md' | 'lg' | 'xl' | 'full' | null>(null);\n\n    return (\n      <>\n        <div className=\"flex flex-wrap gap-2\">\n          <Button size=\"sm\" onClick={() => setSize('sm')",
          "description": "/**"
        },
        {
          "name": "FormDialog",
          "code": "render: function FormExample() {\n    const [isOpen, setIsOpen] = useState(false);\n\n    return (\n      <>\n        <Button onClick={() => setIsOpen(true)",
          "description": "/**"
        },
        {
          "name": "NoCloseButton",
          "code": "render: function NoCloseButtonExample() {\n    const [isOpen, setIsOpen] = useState(false);\n\n    return (\n      <>\n        <Button onClick={() => setIsOpen(true)",
          "description": "/**"
        },
        {
          "name": "ScrollableContent",
          "code": "render: function ScrollableExample() {\n    const [isOpen, setIsOpen] = useState(false);\n\n    return (\n      <>\n        <Button onClick={() => setIsOpen(true)",
          "description": "/**"
        }
      ],
      "accessibility": {
        "ariaAttributes": [
          "aria-hidden",
          "aria-modal",
          "aria-labelledby",
          "aria-describedby",
          "aria-label"
        ],
        "focusManagement": "Includes focus management"
      },
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/organisms/dialog/Dialog.tsx",
      "storyPath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/organisms/dialog/Dialog.stories.tsx",
      "since": "0.1.0"
    },
    {
      "name": "Tabs",
      "category": "organisms",
      "description": "* A fully accessible tabs implementation following WAI-ARIA authoring practices:",
      "props": [
        {
          "name": "variant",
          "type": "TabsVariant",
          "description": "/* Visual variant of the tabs",
          "required": false,
          "defaultValue": "horizontal"
        },
        {
          "name": "orientation",
          "type": "TabsOrientation",
          "description": "/* Orientation of the tab list",
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "description": "/* Controlled active tab value",
          "required": false,
          "defaultValue": "First tab will be active"
        },
        {
          "name": "defaultValue",
          "type": "string",
          "description": "/* Default active tab value for uncontrolled usage",
          "required": false
        },
        {
          "name": "onChange",
          "type": "(value: string) => void",
          "description": "/* Callback when active tab changes",
          "required": false,
          "defaultValue": "false"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "/* Whether all tabs are disabled",
          "required": false
        },
        {
          "name": "children",
          "type": "ReactNode",
          "description": "/* Child components (TabList and TabPanels)",
          "required": true
        }
      ],
      "variants": [
        "line",
        "enclosed",
        "pills"
      ],
      "examples": [
        {
          "name": "Default",
          "code": "render: () => (\n    <Tabs defaultValue=\"tab1\">\n      <TabList aria-label=\"Example tabs\">\n        <Tab value=\"tab1\">Tab 1</Tab>\n        <Tab value=\"tab2\">Tab 2</Tab>\n        <Tab value=\"tab3\">Tab 3</Tab>\n      </TabList>\n      <TabPanel value=\"tab1\">\n        <div className=\"p-4\">\n          <h3 className=\"mb-2 text-lg font-semibold\">Content for Tab 1</h3>\n          <p>This is the content displayed when Tab 1 is active.</p>\n        </div>\n      </TabPanel>\n      <TabPanel value=\"tab2\">\n        <div className=\"p-4\">\n          <h3 className=\"mb-2 text-lg font-semibold\">Content for Tab 2</h3>\n          <p>This is the content displayed when Tab 2 is active.</p>\n        </div>\n      </TabPanel>\n      <TabPanel value=\"tab3\">\n        <div className=\"p-4\">\n          <h3 className=\"mb-2 text-lg font-semibold\">Content for Tab 3</h3>\n          <p>This is the content displayed when Tab 3 is active.</p>\n        </div>\n      </TabPanel>\n    </Tabs>\n  ),",
          "description": "/**"
        },
        {
          "name": "Variants",
          "code": "render: () => (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"mb-4 text-sm font-medium text-text-muted\">Line Variant</h3>\n        <Tabs defaultValue=\"home\" variant=\"line\">\n          <TabList aria-label=\"Line variant\">\n            <Tab value=\"home\">Home</Tab>\n            <Tab value=\"profile\">Profile</Tab>\n            <Tab value=\"settings\">Settings</Tab>\n          </TabList>\n          <TabPanel value=\"home\">\n            <div className=\"p-4\">Home content with underline indicator</div>\n          </TabPanel>\n          <TabPanel value=\"profile\">\n            <div className=\"p-4\">Profile content</div>\n          </TabPanel>\n          <TabPanel value=\"settings\">\n            <div className=\"p-4\">Settings content</div>\n          </TabPanel>\n        </Tabs>\n      </div>\n\n      <div>\n        <h3 className=\"mb-4 text-sm font-medium text-text-muted\">Enclosed Variant</h3>\n        <Tabs defaultValue=\"home\" variant=\"enclosed\">\n          <TabList aria-label=\"Enclosed variant\">\n            <Tab value=\"home\">Home</Tab>\n            <Tab value=\"profile\">Profile</Tab>\n            <Tab value=\"settings\">Settings</Tab>\n          </TabList>\n          <TabPanel value=\"home\">\n            <div className=\"rounded-b-md border border-t-0 border-border p-4\">\n              Home content with enclosed style\n            </div>\n          </TabPanel>\n          <TabPanel value=\"profile\">\n            <div className=\"rounded-b-md border border-t-0 border-border p-4\">\n              Profile content\n            </div>\n          </TabPanel>\n          <TabPanel value=\"settings\">\n            <div className=\"rounded-b-md border border-t-0 border-border p-4\">\n              Settings content\n            </div>\n          </TabPanel>\n        </Tabs>\n      </div>\n\n      <div>\n        <h3 className=\"mb-4 text-sm font-medium text-text-muted\">Pills Variant</h3>\n        <Tabs defaultValue=\"home\" variant=\"pills\">\n          <TabList aria-label=\"Pills variant\">\n            <Tab value=\"home\">Home</Tab>\n            <Tab value=\"profile\">Profile</Tab>\n            <Tab value=\"settings\">Settings</Tab>\n          </TabList>\n          <TabPanel value=\"home\">\n            <div className=\"p-4\">Home content with pill-shaped tabs</div>\n          </TabPanel>\n          <TabPanel value=\"profile\">\n            <div className=\"p-4\">Profile content</div>\n          </TabPanel>\n          <TabPanel value=\"settings\">\n            <div className=\"p-4\">Settings content</div>\n          </TabPanel>\n        </Tabs>\n      </div>\n    </div>\n  ),",
          "description": "/**"
        },
        {
          "name": "WithIcons",
          "code": "render: () => (\n    <Tabs defaultValue=\"home\">\n      <TabList aria-label=\"Navigation with icons\">\n        <Tab\n          value=\"home\"\n          icon={\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n              <path\n                d=\"M2 6L8 2L14 6V13C14 13.5304 13.7893 14.0391 13.4142 14.4142C13.0391 14.7893 12.5304 15 12 15H4C3.46957 15 2.96086 14.7893 2.58579 14.4142C2.21071 14.0391 2 13.5304 2 13V6Z\"\n                stroke=\"currentColor\"\n                strokeWidth=\"1.5\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              />\n            </svg>",
          "description": "/**"
        },
        {
          "name": "VerticalOrientation",
          "code": "render: () => (\n    <Tabs defaultValue=\"overview\" orientation=\"vertical\" variant=\"line\">\n      <TabList aria-label=\"Vertical navigation\">\n        <Tab value=\"overview\">Overview</Tab>\n        <Tab value=\"analytics\">Analytics</Tab>\n        <Tab value=\"reports\">Reports</Tab>\n        <Tab value=\"team\">Team</Tab>\n      </TabList>\n      <TabPanel value=\"overview\">\n        <div className=\"p-6\">\n          <h2 className=\"mb-4 text-xl font-semibold\">Overview</h2>\n          <p>Dashboard overview content with key metrics and summaries.</p>\n        </div>\n      </TabPanel>\n      <TabPanel value=\"analytics\">\n        <div className=\"p-6\">\n          <h2 className=\"mb-4 text-xl font-semibold\">Analytics</h2>\n          <p>Detailed analytics and performance metrics.</p>\n        </div>\n      </TabPanel>\n      <TabPanel value=\"reports\">\n        <div className=\"p-6\">\n          <h2 className=\"mb-4 text-xl font-semibold\">Reports</h2>\n          <p>Generated reports and export options.</p>\n        </div>\n      </TabPanel>\n      <TabPanel value=\"team\">\n        <div className=\"p-6\">\n          <h2 className=\"mb-4 text-xl font-semibold\">Team</h2>\n          <p>Team members and collaboration settings.</p>\n        </div>\n      </TabPanel>\n    </Tabs>\n  ),",
          "description": "/**"
        },
        {
          "name": "WithDisabledTabs",
          "code": "render: () => (\n    <Tabs defaultValue=\"tab1\">\n      <TabList aria-label=\"Tabs with disabled items\">\n        <Tab value=\"tab1\">Available</Tab>\n        <Tab value=\"tab2\" disabled>\n          Disabled\n        </Tab>\n        <Tab value=\"tab3\">Available</Tab>\n        <Tab value=\"tab4\" disabled>\n          Disabled\n        </Tab>\n      </TabList>\n      <TabPanel value=\"tab1\">\n        <div className=\"p-4\">This tab is available and can be selected.</div>\n      </TabPanel>\n      <TabPanel value=\"tab2\">\n        <div className=\"p-4\">This content is not accessible.</div>\n      </TabPanel>\n      <TabPanel value=\"tab3\">\n        <div className=\"p-4\">Another available tab.</div>\n      </TabPanel>\n      <TabPanel value=\"tab4\">\n        <div className=\"p-4\">This content is also not accessible.</div>\n      </TabPanel>\n    </Tabs>\n  ),",
          "description": "/**"
        },
        {
          "name": "AllDisabled",
          "code": "render: () => (\n    <Tabs defaultValue=\"tab1\" disabled>\n      <TabList aria-label=\"All tabs disabled\">\n        <Tab value=\"tab1\">Tab 1</Tab>\n        <Tab value=\"tab2\">Tab 2</Tab>\n        <Tab value=\"tab3\">Tab 3</Tab>\n      </TabList>\n      <TabPanel value=\"tab1\">\n        <div className=\"p-4\">All tabs are disabled.</div>\n      </TabPanel>\n      <TabPanel value=\"tab2\">\n        <div className=\"p-4\">Cannot switch tabs.</div>\n      </TabPanel>\n      <TabPanel value=\"tab3\">\n        <div className=\"p-4\">All interaction disabled.</div>\n      </TabPanel>\n    </Tabs>\n  ),",
          "description": "/**"
        },
        {
          "name": "Controlled",
          "code": "render: () => {\n    const [activeTab, setActiveTab] = useState('settings');\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex gap-2\">\n          <button\n            onClick={() => setActiveTab('home')",
          "description": "/**"
        },
        {
          "name": "ComplexContent",
          "code": "render: () => (\n    <Tabs defaultValue=\"form\" variant=\"pills\">\n      <TabList aria-label=\"Complex content example\">\n        <Tab value=\"form\">Form</Tab>\n        <Tab value=\"table\">Table</Tab>\n        <Tab value=\"chart\">Chart</Tab>\n      </TabList>\n      <TabPanel value=\"form\">\n        <div className=\"space-y-4 p-4\">\n          <div>\n            <label className=\"mb-1 block text-sm font-medium\">Name</label>\n            <input\n              type=\"text\"\n              className=\"w-full rounded border border-border px-3 py-2\"\n              placeholder=\"Enter your name\"\n            />\n          </div>\n          <div>\n            <label className=\"mb-1 block text-sm font-medium\">Email</label>\n            <input\n              type=\"email\"\n              className=\"w-full rounded border border-border px-3 py-2\"\n              placeholder=\"Enter your email\"\n            />\n          </div>\n          <button className=\"rounded bg-brand-600 px-4 py-2 text-white hover:bg-brand-700\">\n            Submit\n          </button>\n        </div>\n      </TabPanel>\n      <TabPanel value=\"table\">\n        <div className=\"p-4\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-border\">\n                <th className=\"pb-2 text-left\">Name</th>\n                <th className=\"pb-2 text-left\">Status</th>\n                <th className=\"pb-2 text-left\">Role</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr className=\"border-b border-border\">\n                <td className=\"py-2\">John Doe</td>\n                <td className=\"py-2\">Active</td>\n                <td className=\"py-2\">Admin</td>\n              </tr>\n              <tr className=\"border-b border-border\">\n                <td className=\"py-2\">Jane Smith</td>\n                <td className=\"py-2\">Active</td>\n                <td className=\"py-2\">User</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </TabPanel>\n      <TabPanel value=\"chart\">\n        <div className=\"p-4\">\n          <div className=\"flex h-48 items-end justify-around gap-2\">\n            <div className=\"h-3/4 w-16 rounded-t bg-brand-600\"></div>\n            <div className=\"h-1/2 w-16 rounded-t bg-brand-600\"></div>\n            <div className=\"h-full w-16 rounded-t bg-brand-600\"></div>\n            <div className=\"h-2/3 w-16 rounded-t bg-brand-600\"></div>\n          </div>\n          <p className=\"mt-4 text-center text-sm text-text-muted\">Sample Chart Visualization</p>\n        </div>\n      </TabPanel>\n    </Tabs>\n  ),",
          "description": "/**"
        },
        {
          "name": "VerticalVariants",
          "code": "render: () => (\n    <div className=\"grid grid-cols-3 gap-8\">\n      <div>\n        <h3 className=\"mb-4 text-sm font-medium text-text-muted\">Line</h3>\n        <Tabs defaultValue=\"tab1\" orientation=\"vertical\" variant=\"line\">\n          <TabList aria-label=\"Vertical line\">\n            <Tab value=\"tab1\">Tab 1</Tab>\n            <Tab value=\"tab2\">Tab 2</Tab>\n            <Tab value=\"tab3\">Tab 3</Tab>\n          </TabList>\n          <TabPanel value=\"tab1\">\n            <div className=\"p-4\">Content 1</div>\n          </TabPanel>\n          <TabPanel value=\"tab2\">\n            <div className=\"p-4\">Content 2</div>\n          </TabPanel>\n          <TabPanel value=\"tab3\">\n            <div className=\"p-4\">Content 3</div>\n          </TabPanel>\n        </Tabs>\n      </div>\n\n      <div>\n        <h3 className=\"mb-4 text-sm font-medium text-text-muted\">Enclosed</h3>\n        <Tabs defaultValue=\"tab1\" orientation=\"vertical\" variant=\"enclosed\">\n          <TabList aria-label=\"Vertical enclosed\">\n            <Tab value=\"tab1\">Tab 1</Tab>\n            <Tab value=\"tab2\">Tab 2</Tab>\n            <Tab value=\"tab3\">Tab 3</Tab>\n          </TabList>\n          <TabPanel value=\"tab1\">\n            <div className=\"p-4\">Content 1</div>\n          </TabPanel>\n          <TabPanel value=\"tab2\">\n            <div className=\"p-4\">Content 2</div>\n          </TabPanel>\n          <TabPanel value=\"tab3\">\n            <div className=\"p-4\">Content 3</div>\n          </TabPanel>\n        </Tabs>\n      </div>\n\n      <div>\n        <h3 className=\"mb-4 text-sm font-medium text-text-muted\">Pills</h3>\n        <Tabs defaultValue=\"tab1\" orientation=\"vertical\" variant=\"pills\">\n          <TabList aria-label=\"Vertical pills\">\n            <Tab value=\"tab1\">Tab 1</Tab>\n            <Tab value=\"tab2\">Tab 2</Tab>\n            <Tab value=\"tab3\">Tab 3</Tab>\n          </TabList>\n          <TabPanel value=\"tab1\">\n            <div className=\"p-4\">Content 1</div>\n          </TabPanel>\n          <TabPanel value=\"tab2\">\n            <div className=\"p-4\">Content 2</div>\n          </TabPanel>\n          <TabPanel value=\"tab3\">\n            <div className=\"p-4\">Content 3</div>\n          </TabPanel>\n        </Tabs>\n      </div>\n    </div>\n  ),",
          "description": "/**"
        }
      ],
      "accessibility": {
        "keyboardNavigation": "'Organisms/Tabs',",
        "screenReaderSupport": "'Organisms/Tabs',",
        "wcagCompliance": "WCAG 2.2 AA compliant",
        "ariaAttributes": [
          "aria-label",
          "aria-orientation",
          "aria-disabled",
          "aria-selected",
          "aria-controls",
          "aria-labelledby"
        ],
        "focusManagement": "Includes focus management"
      },
      "filePath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/organisms/tabs/Tabs.tsx",
      "storyPath": "/Users/acarroll/dev/projects/claude-sandbox/src/components/organisms/tabs/Tabs.stories.tsx",
      "since": "0.1.0"
    }
  ],
  "categories": {
    "atoms": [
      "Avatar",
      "Badge",
      "Button",
      "Checkbox",
      "Divider",
      "Flex",
      "Grid",
      "Input",
      "Radio",
      "Spinner",
      "Stack",
      "Switch",
      "Tag"
    ],
    "molecules": [
      "Alert",
      "Select",
      "Stepper",
      "Tooltip"
    ],
    "organisms": [
      "Card",
      "Dialog",
      "Tabs"
    ],
    "templates": []
  }
}